
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>
/**
 * Model FavoriteGame
 * 
 */
export type FavoriteGame = $Result.DefaultSelection<Prisma.$FavoriteGamePayload>
/**
 * Model WatchParty
 * 
 */
export type WatchParty = $Result.DefaultSelection<Prisma.$WatchPartyPayload>
/**
 * Model WatchPartyParticipant
 * 
 */
export type WatchPartyParticipant = $Result.DefaultSelection<Prisma.$WatchPartyParticipantPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const GameStatus: {
  SCHEDULED: 'SCHEDULED',
  LIVE: 'LIVE',
  FINISHED: 'FINISHED',
  POSTPONED: 'POSTPONED'
};

export type GameStatus = (typeof GameStatus)[keyof typeof GameStatus]

}

export type GameStatus = $Enums.GameStatus

export const GameStatus: typeof $Enums.GameStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.favoriteGame`: Exposes CRUD operations for the **FavoriteGame** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavoriteGames
    * const favoriteGames = await prisma.favoriteGame.findMany()
    * ```
    */
  get favoriteGame(): Prisma.FavoriteGameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.watchParty`: Exposes CRUD operations for the **WatchParty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WatchParties
    * const watchParties = await prisma.watchParty.findMany()
    * ```
    */
  get watchParty(): Prisma.WatchPartyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.watchPartyParticipant`: Exposes CRUD operations for the **WatchPartyParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WatchPartyParticipants
    * const watchPartyParticipants = await prisma.watchPartyParticipant.findMany()
    * ```
    */
  get watchPartyParticipant(): Prisma.WatchPartyParticipantDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Game: 'Game',
    ChatMessage: 'ChatMessage',
    FavoriteGame: 'FavoriteGame',
    WatchParty: 'WatchParty',
    WatchPartyParticipant: 'WatchPartyParticipant'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "game" | "chatMessage" | "favoriteGame" | "watchParty" | "watchPartyParticipant"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
      FavoriteGame: {
        payload: Prisma.$FavoriteGamePayload<ExtArgs>
        fields: Prisma.FavoriteGameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoriteGameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteGamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoriteGameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteGamePayload>
          }
          findFirst: {
            args: Prisma.FavoriteGameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteGamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoriteGameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteGamePayload>
          }
          findMany: {
            args: Prisma.FavoriteGameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteGamePayload>[]
          }
          create: {
            args: Prisma.FavoriteGameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteGamePayload>
          }
          createMany: {
            args: Prisma.FavoriteGameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FavoriteGameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteGamePayload>[]
          }
          delete: {
            args: Prisma.FavoriteGameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteGamePayload>
          }
          update: {
            args: Prisma.FavoriteGameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteGamePayload>
          }
          deleteMany: {
            args: Prisma.FavoriteGameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FavoriteGameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FavoriteGameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteGamePayload>[]
          }
          upsert: {
            args: Prisma.FavoriteGameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FavoriteGamePayload>
          }
          aggregate: {
            args: Prisma.FavoriteGameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavoriteGame>
          }
          groupBy: {
            args: Prisma.FavoriteGameGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteGameGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoriteGameCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteGameCountAggregateOutputType> | number
          }
        }
      }
      WatchParty: {
        payload: Prisma.$WatchPartyPayload<ExtArgs>
        fields: Prisma.WatchPartyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WatchPartyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WatchPartyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyPayload>
          }
          findFirst: {
            args: Prisma.WatchPartyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WatchPartyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyPayload>
          }
          findMany: {
            args: Prisma.WatchPartyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyPayload>[]
          }
          create: {
            args: Prisma.WatchPartyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyPayload>
          }
          createMany: {
            args: Prisma.WatchPartyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WatchPartyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyPayload>[]
          }
          delete: {
            args: Prisma.WatchPartyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyPayload>
          }
          update: {
            args: Prisma.WatchPartyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyPayload>
          }
          deleteMany: {
            args: Prisma.WatchPartyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WatchPartyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WatchPartyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyPayload>[]
          }
          upsert: {
            args: Prisma.WatchPartyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyPayload>
          }
          aggregate: {
            args: Prisma.WatchPartyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWatchParty>
          }
          groupBy: {
            args: Prisma.WatchPartyGroupByArgs<ExtArgs>
            result: $Utils.Optional<WatchPartyGroupByOutputType>[]
          }
          count: {
            args: Prisma.WatchPartyCountArgs<ExtArgs>
            result: $Utils.Optional<WatchPartyCountAggregateOutputType> | number
          }
        }
      }
      WatchPartyParticipant: {
        payload: Prisma.$WatchPartyParticipantPayload<ExtArgs>
        fields: Prisma.WatchPartyParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WatchPartyParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WatchPartyParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyParticipantPayload>
          }
          findFirst: {
            args: Prisma.WatchPartyParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WatchPartyParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyParticipantPayload>
          }
          findMany: {
            args: Prisma.WatchPartyParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyParticipantPayload>[]
          }
          create: {
            args: Prisma.WatchPartyParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyParticipantPayload>
          }
          createMany: {
            args: Prisma.WatchPartyParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WatchPartyParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyParticipantPayload>[]
          }
          delete: {
            args: Prisma.WatchPartyParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyParticipantPayload>
          }
          update: {
            args: Prisma.WatchPartyParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyParticipantPayload>
          }
          deleteMany: {
            args: Prisma.WatchPartyParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WatchPartyParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WatchPartyParticipantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyParticipantPayload>[]
          }
          upsert: {
            args: Prisma.WatchPartyParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchPartyParticipantPayload>
          }
          aggregate: {
            args: Prisma.WatchPartyParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWatchPartyParticipant>
          }
          groupBy: {
            args: Prisma.WatchPartyParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<WatchPartyParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.WatchPartyParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<WatchPartyParticipantCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    game?: GameOmit
    chatMessage?: ChatMessageOmit
    favoriteGame?: FavoriteGameOmit
    watchParty?: WatchPartyOmit
    watchPartyParticipant?: WatchPartyParticipantOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    chatMessages: number
    favoriteGames: number
    watchParties: number
    participations: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatMessages?: boolean | UserCountOutputTypeCountChatMessagesArgs
    favoriteGames?: boolean | UserCountOutputTypeCountFavoriteGamesArgs
    watchParties?: boolean | UserCountOutputTypeCountWatchPartiesArgs
    participations?: boolean | UserCountOutputTypeCountParticipationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavoriteGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteGameWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWatchPartiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchPartyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchPartyParticipantWhereInput
  }


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    chatMessages: number
    favoriteGames: number
    watchParties: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatMessages?: boolean | GameCountOutputTypeCountChatMessagesArgs
    favoriteGames?: boolean | GameCountOutputTypeCountFavoriteGamesArgs
    watchParties?: boolean | GameCountOutputTypeCountWatchPartiesArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountFavoriteGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteGameWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountWatchPartiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchPartyWhereInput
  }


  /**
   * Count Type WatchPartyCountOutputType
   */

  export type WatchPartyCountOutputType = {
    particpants: number
  }

  export type WatchPartyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    particpants?: boolean | WatchPartyCountOutputTypeCountParticpantsArgs
  }

  // Custom InputTypes
  /**
   * WatchPartyCountOutputType without action
   */
  export type WatchPartyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyCountOutputType
     */
    select?: WatchPartyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WatchPartyCountOutputType without action
   */
  export type WatchPartyCountOutputTypeCountParticpantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchPartyParticipantWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    username: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    username: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    username: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatMessages?: boolean | User$chatMessagesArgs<ExtArgs>
    favoriteGames?: boolean | User$favoriteGamesArgs<ExtArgs>
    watchParties?: boolean | User$watchPartiesArgs<ExtArgs>
    participations?: boolean | User$participationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "username" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatMessages?: boolean | User$chatMessagesArgs<ExtArgs>
    favoriteGames?: boolean | User$favoriteGamesArgs<ExtArgs>
    watchParties?: boolean | User$watchPartiesArgs<ExtArgs>
    participations?: boolean | User$participationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      chatMessages: Prisma.$ChatMessagePayload<ExtArgs>[]
      favoriteGames: Prisma.$FavoriteGamePayload<ExtArgs>[]
      watchParties: Prisma.$WatchPartyPayload<ExtArgs>[]
      participations: Prisma.$WatchPartyParticipantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      username: string
      password: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatMessages<T extends User$chatMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$chatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    favoriteGames<T extends User$favoriteGamesArgs<ExtArgs> = {}>(args?: Subset<T, User$favoriteGamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    watchParties<T extends User$watchPartiesArgs<ExtArgs> = {}>(args?: Subset<T, User$watchPartiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participations<T extends User$participationsArgs<ExtArgs> = {}>(args?: Subset<T, User$participationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.chatMessages
   */
  export type User$chatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * User.favoriteGames
   */
  export type User$favoriteGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameInclude<ExtArgs> | null
    where?: FavoriteGameWhereInput
    orderBy?: FavoriteGameOrderByWithRelationInput | FavoriteGameOrderByWithRelationInput[]
    cursor?: FavoriteGameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteGameScalarFieldEnum | FavoriteGameScalarFieldEnum[]
  }

  /**
   * User.watchParties
   */
  export type User$watchPartiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyInclude<ExtArgs> | null
    where?: WatchPartyWhereInput
    orderBy?: WatchPartyOrderByWithRelationInput | WatchPartyOrderByWithRelationInput[]
    cursor?: WatchPartyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchPartyScalarFieldEnum | WatchPartyScalarFieldEnum[]
  }

  /**
   * User.participations
   */
  export type User$participationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantInclude<ExtArgs> | null
    where?: WatchPartyParticipantWhereInput
    orderBy?: WatchPartyParticipantOrderByWithRelationInput | WatchPartyParticipantOrderByWithRelationInput[]
    cursor?: WatchPartyParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchPartyParticipantScalarFieldEnum | WatchPartyParticipantScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    id: number | null
    homeScore: number | null
    awayScore: number | null
    quarter: number | null
  }

  export type GameSumAggregateOutputType = {
    id: number | null
    homeScore: number | null
    awayScore: number | null
    quarter: number | null
  }

  export type GameMinAggregateOutputType = {
    id: number | null
    homeTeam: string | null
    awayTeam: string | null
    homeScore: number | null
    awayScore: number | null
    quarter: number | null
    timeLeft: string | null
    status: $Enums.GameStatus | null
    gameDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameMaxAggregateOutputType = {
    id: number | null
    homeTeam: string | null
    awayTeam: string | null
    homeScore: number | null
    awayScore: number | null
    quarter: number | null
    timeLeft: string | null
    status: $Enums.GameStatus | null
    gameDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    homeTeam: number
    awayTeam: number
    homeScore: number
    awayScore: number
    quarter: number
    timeLeft: number
    status: number
    gameDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    id?: true
    homeScore?: true
    awayScore?: true
    quarter?: true
  }

  export type GameSumAggregateInputType = {
    id?: true
    homeScore?: true
    awayScore?: true
    quarter?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    homeTeam?: true
    awayTeam?: true
    homeScore?: true
    awayScore?: true
    quarter?: true
    timeLeft?: true
    status?: true
    gameDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    homeTeam?: true
    awayTeam?: true
    homeScore?: true
    awayScore?: true
    quarter?: true
    timeLeft?: true
    status?: true
    gameDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    homeTeam?: true
    awayTeam?: true
    homeScore?: true
    awayScore?: true
    quarter?: true
    timeLeft?: true
    status?: true
    gameDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: number
    homeTeam: string
    awayTeam: string
    homeScore: number
    awayScore: number
    quarter: number
    timeLeft: string
    status: $Enums.GameStatus
    gameDate: Date
    createdAt: Date
    updatedAt: Date
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    homeTeam?: boolean
    awayTeam?: boolean
    homeScore?: boolean
    awayScore?: boolean
    quarter?: boolean
    timeLeft?: boolean
    status?: boolean
    gameDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chatMessages?: boolean | Game$chatMessagesArgs<ExtArgs>
    favoriteGames?: boolean | Game$favoriteGamesArgs<ExtArgs>
    watchParties?: boolean | Game$watchPartiesArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    homeTeam?: boolean
    awayTeam?: boolean
    homeScore?: boolean
    awayScore?: boolean
    quarter?: boolean
    timeLeft?: boolean
    status?: boolean
    gameDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["game"]>

  export type GameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    homeTeam?: boolean
    awayTeam?: boolean
    homeScore?: boolean
    awayScore?: boolean
    quarter?: boolean
    timeLeft?: boolean
    status?: boolean
    gameDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    homeTeam?: boolean
    awayTeam?: boolean
    homeScore?: boolean
    awayScore?: boolean
    quarter?: boolean
    timeLeft?: boolean
    status?: boolean
    gameDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "homeTeam" | "awayTeam" | "homeScore" | "awayScore" | "quarter" | "timeLeft" | "status" | "gameDate" | "createdAt" | "updatedAt", ExtArgs["result"]["game"]>
  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatMessages?: boolean | Game$chatMessagesArgs<ExtArgs>
    favoriteGames?: boolean | Game$favoriteGamesArgs<ExtArgs>
    watchParties?: boolean | Game$watchPartiesArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      chatMessages: Prisma.$ChatMessagePayload<ExtArgs>[]
      favoriteGames: Prisma.$FavoriteGamePayload<ExtArgs>[]
      watchParties: Prisma.$WatchPartyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      homeTeam: string
      awayTeam: string
      homeScore: number
      awayScore: number
      quarter: number
      timeLeft: string
      status: $Enums.GameStatus
      gameDate: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games and returns the data updated in the database.
     * @param {GameUpdateManyAndReturnArgs} args - Arguments to update many Games.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameUpdateManyAndReturnArgs>(args: SelectSubset<T, GameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatMessages<T extends Game$chatMessagesArgs<ExtArgs> = {}>(args?: Subset<T, Game$chatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    favoriteGames<T extends Game$favoriteGamesArgs<ExtArgs> = {}>(args?: Subset<T, Game$favoriteGamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    watchParties<T extends Game$watchPartiesArgs<ExtArgs> = {}>(args?: Subset<T, Game$watchPartiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'Int'>
    readonly homeTeam: FieldRef<"Game", 'String'>
    readonly awayTeam: FieldRef<"Game", 'String'>
    readonly homeScore: FieldRef<"Game", 'Int'>
    readonly awayScore: FieldRef<"Game", 'Int'>
    readonly quarter: FieldRef<"Game", 'Int'>
    readonly timeLeft: FieldRef<"Game", 'String'>
    readonly status: FieldRef<"Game", 'GameStatus'>
    readonly gameDate: FieldRef<"Game", 'DateTime'>
    readonly createdAt: FieldRef<"Game", 'DateTime'>
    readonly updatedAt: FieldRef<"Game", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game updateManyAndReturn
   */
  export type GameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to delete.
     */
    limit?: number
  }

  /**
   * Game.chatMessages
   */
  export type Game$chatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * Game.favoriteGames
   */
  export type Game$favoriteGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameInclude<ExtArgs> | null
    where?: FavoriteGameWhereInput
    orderBy?: FavoriteGameOrderByWithRelationInput | FavoriteGameOrderByWithRelationInput[]
    cursor?: FavoriteGameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteGameScalarFieldEnum | FavoriteGameScalarFieldEnum[]
  }

  /**
   * Game.watchParties
   */
  export type Game$watchPartiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyInclude<ExtArgs> | null
    where?: WatchPartyWhereInput
    orderBy?: WatchPartyOrderByWithRelationInput | WatchPartyOrderByWithRelationInput[]
    cursor?: WatchPartyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchPartyScalarFieldEnum | WatchPartyScalarFieldEnum[]
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    gameId: number | null
  }

  export type ChatMessageSumAggregateOutputType = {
    id: number | null
    userId: number | null
    gameId: number | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: number | null
    message: string | null
    createdAt: Date | null
    userId: number | null
    gameId: number | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: number | null
    message: string | null
    createdAt: Date | null
    userId: number | null
    gameId: number | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    message: number
    createdAt: number
    userId: number
    gameId: number
    _all: number
  }


  export type ChatMessageAvgAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
  }

  export type ChatMessageSumAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
  }

  export type ChatMessageMinAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    userId?: true
    gameId?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    userId?: true
    gameId?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    userId?: true
    gameId?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _avg?: ChatMessageAvgAggregateInputType
    _sum?: ChatMessageSumAggregateInputType
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: number
    message: string
    createdAt: Date
    userId: number
    gameId: number
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    createdAt?: boolean
    userId?: boolean
    gameId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    createdAt?: boolean
    userId?: boolean
    gameId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    createdAt?: boolean
    userId?: boolean
    gameId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>

  export type ChatMessageSelectScalar = {
    id?: boolean
    message?: boolean
    createdAt?: boolean
    userId?: boolean
    gameId?: boolean
  }

  export type ChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "message" | "createdAt" | "userId" | "gameId", ExtArgs["result"]["chatMessage"]>
  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type ChatMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      game: Prisma.$GamePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      message: string
      createdAt: Date
      userId: number
      gameId: number
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatMessages and returns the data saved in the database.
     * @param {ChatMessageCreateManyAndReturnArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages and returns the data updated in the database.
     * @param {ChatMessageUpdateManyAndReturnArgs} args - Arguments to update many ChatMessages.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatMessages and only return the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'Int'>
    readonly message: FieldRef<"ChatMessage", 'String'>
    readonly createdAt: FieldRef<"ChatMessage", 'DateTime'>
    readonly userId: FieldRef<"ChatMessage", 'Int'>
    readonly gameId: FieldRef<"ChatMessage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage createManyAndReturn
   */
  export type ChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
  }

  /**
   * ChatMessage updateManyAndReturn
   */
  export type ChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to delete.
     */
    limit?: number
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model FavoriteGame
   */

  export type AggregateFavoriteGame = {
    _count: FavoriteGameCountAggregateOutputType | null
    _avg: FavoriteGameAvgAggregateOutputType | null
    _sum: FavoriteGameSumAggregateOutputType | null
    _min: FavoriteGameMinAggregateOutputType | null
    _max: FavoriteGameMaxAggregateOutputType | null
  }

  export type FavoriteGameAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    gameId: number | null
  }

  export type FavoriteGameSumAggregateOutputType = {
    id: number | null
    userId: number | null
    gameId: number | null
  }

  export type FavoriteGameMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    userId: number | null
    gameId: number | null
  }

  export type FavoriteGameMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    userId: number | null
    gameId: number | null
  }

  export type FavoriteGameCountAggregateOutputType = {
    id: number
    createdAt: number
    userId: number
    gameId: number
    _all: number
  }


  export type FavoriteGameAvgAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
  }

  export type FavoriteGameSumAggregateInputType = {
    id?: true
    userId?: true
    gameId?: true
  }

  export type FavoriteGameMinAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    gameId?: true
  }

  export type FavoriteGameMaxAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    gameId?: true
  }

  export type FavoriteGameCountAggregateInputType = {
    id?: true
    createdAt?: true
    userId?: true
    gameId?: true
    _all?: true
  }

  export type FavoriteGameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteGame to aggregate.
     */
    where?: FavoriteGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteGames to fetch.
     */
    orderBy?: FavoriteGameOrderByWithRelationInput | FavoriteGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoriteGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FavoriteGames
    **/
    _count?: true | FavoriteGameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoriteGameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoriteGameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteGameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteGameMaxAggregateInputType
  }

  export type GetFavoriteGameAggregateType<T extends FavoriteGameAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoriteGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoriteGame[P]>
      : GetScalarType<T[P], AggregateFavoriteGame[P]>
  }




  export type FavoriteGameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavoriteGameWhereInput
    orderBy?: FavoriteGameOrderByWithAggregationInput | FavoriteGameOrderByWithAggregationInput[]
    by: FavoriteGameScalarFieldEnum[] | FavoriteGameScalarFieldEnum
    having?: FavoriteGameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteGameCountAggregateInputType | true
    _avg?: FavoriteGameAvgAggregateInputType
    _sum?: FavoriteGameSumAggregateInputType
    _min?: FavoriteGameMinAggregateInputType
    _max?: FavoriteGameMaxAggregateInputType
  }

  export type FavoriteGameGroupByOutputType = {
    id: number
    createdAt: Date
    userId: number
    gameId: number
    _count: FavoriteGameCountAggregateOutputType | null
    _avg: FavoriteGameAvgAggregateOutputType | null
    _sum: FavoriteGameSumAggregateOutputType | null
    _min: FavoriteGameMinAggregateOutputType | null
    _max: FavoriteGameMaxAggregateOutputType | null
  }

  type GetFavoriteGameGroupByPayload<T extends FavoriteGameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteGameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteGameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteGameGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteGameGroupByOutputType[P]>
        }
      >
    >


  export type FavoriteGameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    gameId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteGame"]>

  export type FavoriteGameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    gameId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteGame"]>

  export type FavoriteGameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    gameId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoriteGame"]>

  export type FavoriteGameSelectScalar = {
    id?: boolean
    createdAt?: boolean
    userId?: boolean
    gameId?: boolean
  }

  export type FavoriteGameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "userId" | "gameId", ExtArgs["result"]["favoriteGame"]>
  export type FavoriteGameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type FavoriteGameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }
  export type FavoriteGameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
  }

  export type $FavoriteGamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FavoriteGame"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      game: Prisma.$GamePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      userId: number
      gameId: number
    }, ExtArgs["result"]["favoriteGame"]>
    composites: {}
  }

  type FavoriteGameGetPayload<S extends boolean | null | undefined | FavoriteGameDefaultArgs> = $Result.GetResult<Prisma.$FavoriteGamePayload, S>

  type FavoriteGameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FavoriteGameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FavoriteGameCountAggregateInputType | true
    }

  export interface FavoriteGameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FavoriteGame'], meta: { name: 'FavoriteGame' } }
    /**
     * Find zero or one FavoriteGame that matches the filter.
     * @param {FavoriteGameFindUniqueArgs} args - Arguments to find a FavoriteGame
     * @example
     * // Get one FavoriteGame
     * const favoriteGame = await prisma.favoriteGame.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FavoriteGameFindUniqueArgs>(args: SelectSubset<T, FavoriteGameFindUniqueArgs<ExtArgs>>): Prisma__FavoriteGameClient<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FavoriteGame that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FavoriteGameFindUniqueOrThrowArgs} args - Arguments to find a FavoriteGame
     * @example
     * // Get one FavoriteGame
     * const favoriteGame = await prisma.favoriteGame.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FavoriteGameFindUniqueOrThrowArgs>(args: SelectSubset<T, FavoriteGameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FavoriteGameClient<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FavoriteGame that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGameFindFirstArgs} args - Arguments to find a FavoriteGame
     * @example
     * // Get one FavoriteGame
     * const favoriteGame = await prisma.favoriteGame.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FavoriteGameFindFirstArgs>(args?: SelectSubset<T, FavoriteGameFindFirstArgs<ExtArgs>>): Prisma__FavoriteGameClient<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FavoriteGame that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGameFindFirstOrThrowArgs} args - Arguments to find a FavoriteGame
     * @example
     * // Get one FavoriteGame
     * const favoriteGame = await prisma.favoriteGame.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FavoriteGameFindFirstOrThrowArgs>(args?: SelectSubset<T, FavoriteGameFindFirstOrThrowArgs<ExtArgs>>): Prisma__FavoriteGameClient<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FavoriteGames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavoriteGames
     * const favoriteGames = await prisma.favoriteGame.findMany()
     * 
     * // Get first 10 FavoriteGames
     * const favoriteGames = await prisma.favoriteGame.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteGameWithIdOnly = await prisma.favoriteGame.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FavoriteGameFindManyArgs>(args?: SelectSubset<T, FavoriteGameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FavoriteGame.
     * @param {FavoriteGameCreateArgs} args - Arguments to create a FavoriteGame.
     * @example
     * // Create one FavoriteGame
     * const FavoriteGame = await prisma.favoriteGame.create({
     *   data: {
     *     // ... data to create a FavoriteGame
     *   }
     * })
     * 
     */
    create<T extends FavoriteGameCreateArgs>(args: SelectSubset<T, FavoriteGameCreateArgs<ExtArgs>>): Prisma__FavoriteGameClient<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FavoriteGames.
     * @param {FavoriteGameCreateManyArgs} args - Arguments to create many FavoriteGames.
     * @example
     * // Create many FavoriteGames
     * const favoriteGame = await prisma.favoriteGame.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FavoriteGameCreateManyArgs>(args?: SelectSubset<T, FavoriteGameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FavoriteGames and returns the data saved in the database.
     * @param {FavoriteGameCreateManyAndReturnArgs} args - Arguments to create many FavoriteGames.
     * @example
     * // Create many FavoriteGames
     * const favoriteGame = await prisma.favoriteGame.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FavoriteGames and only return the `id`
     * const favoriteGameWithIdOnly = await prisma.favoriteGame.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FavoriteGameCreateManyAndReturnArgs>(args?: SelectSubset<T, FavoriteGameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FavoriteGame.
     * @param {FavoriteGameDeleteArgs} args - Arguments to delete one FavoriteGame.
     * @example
     * // Delete one FavoriteGame
     * const FavoriteGame = await prisma.favoriteGame.delete({
     *   where: {
     *     // ... filter to delete one FavoriteGame
     *   }
     * })
     * 
     */
    delete<T extends FavoriteGameDeleteArgs>(args: SelectSubset<T, FavoriteGameDeleteArgs<ExtArgs>>): Prisma__FavoriteGameClient<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FavoriteGame.
     * @param {FavoriteGameUpdateArgs} args - Arguments to update one FavoriteGame.
     * @example
     * // Update one FavoriteGame
     * const favoriteGame = await prisma.favoriteGame.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FavoriteGameUpdateArgs>(args: SelectSubset<T, FavoriteGameUpdateArgs<ExtArgs>>): Prisma__FavoriteGameClient<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FavoriteGames.
     * @param {FavoriteGameDeleteManyArgs} args - Arguments to filter FavoriteGames to delete.
     * @example
     * // Delete a few FavoriteGames
     * const { count } = await prisma.favoriteGame.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FavoriteGameDeleteManyArgs>(args?: SelectSubset<T, FavoriteGameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoriteGames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavoriteGames
     * const favoriteGame = await prisma.favoriteGame.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FavoriteGameUpdateManyArgs>(args: SelectSubset<T, FavoriteGameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavoriteGames and returns the data updated in the database.
     * @param {FavoriteGameUpdateManyAndReturnArgs} args - Arguments to update many FavoriteGames.
     * @example
     * // Update many FavoriteGames
     * const favoriteGame = await prisma.favoriteGame.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FavoriteGames and only return the `id`
     * const favoriteGameWithIdOnly = await prisma.favoriteGame.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FavoriteGameUpdateManyAndReturnArgs>(args: SelectSubset<T, FavoriteGameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FavoriteGame.
     * @param {FavoriteGameUpsertArgs} args - Arguments to update or create a FavoriteGame.
     * @example
     * // Update or create a FavoriteGame
     * const favoriteGame = await prisma.favoriteGame.upsert({
     *   create: {
     *     // ... data to create a FavoriteGame
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavoriteGame we want to update
     *   }
     * })
     */
    upsert<T extends FavoriteGameUpsertArgs>(args: SelectSubset<T, FavoriteGameUpsertArgs<ExtArgs>>): Prisma__FavoriteGameClient<$Result.GetResult<Prisma.$FavoriteGamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FavoriteGames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGameCountArgs} args - Arguments to filter FavoriteGames to count.
     * @example
     * // Count the number of FavoriteGames
     * const count = await prisma.favoriteGame.count({
     *   where: {
     *     // ... the filter for the FavoriteGames we want to count
     *   }
     * })
    **/
    count<T extends FavoriteGameCountArgs>(
      args?: Subset<T, FavoriteGameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteGameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavoriteGame.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteGameAggregateArgs>(args: Subset<T, FavoriteGameAggregateArgs>): Prisma.PrismaPromise<GetFavoriteGameAggregateType<T>>

    /**
     * Group by FavoriteGame.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteGameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoriteGameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoriteGameGroupByArgs['orderBy'] }
        : { orderBy?: FavoriteGameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoriteGameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FavoriteGame model
   */
  readonly fields: FavoriteGameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FavoriteGame.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoriteGameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FavoriteGame model
   */
  interface FavoriteGameFieldRefs {
    readonly id: FieldRef<"FavoriteGame", 'Int'>
    readonly createdAt: FieldRef<"FavoriteGame", 'DateTime'>
    readonly userId: FieldRef<"FavoriteGame", 'Int'>
    readonly gameId: FieldRef<"FavoriteGame", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FavoriteGame findUnique
   */
  export type FavoriteGameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteGame to fetch.
     */
    where: FavoriteGameWhereUniqueInput
  }

  /**
   * FavoriteGame findUniqueOrThrow
   */
  export type FavoriteGameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteGame to fetch.
     */
    where: FavoriteGameWhereUniqueInput
  }

  /**
   * FavoriteGame findFirst
   */
  export type FavoriteGameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteGame to fetch.
     */
    where?: FavoriteGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteGames to fetch.
     */
    orderBy?: FavoriteGameOrderByWithRelationInput | FavoriteGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteGames.
     */
    cursor?: FavoriteGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteGames.
     */
    distinct?: FavoriteGameScalarFieldEnum | FavoriteGameScalarFieldEnum[]
  }

  /**
   * FavoriteGame findFirstOrThrow
   */
  export type FavoriteGameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteGame to fetch.
     */
    where?: FavoriteGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteGames to fetch.
     */
    orderBy?: FavoriteGameOrderByWithRelationInput | FavoriteGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavoriteGames.
     */
    cursor?: FavoriteGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteGames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavoriteGames.
     */
    distinct?: FavoriteGameScalarFieldEnum | FavoriteGameScalarFieldEnum[]
  }

  /**
   * FavoriteGame findMany
   */
  export type FavoriteGameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameInclude<ExtArgs> | null
    /**
     * Filter, which FavoriteGames to fetch.
     */
    where?: FavoriteGameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavoriteGames to fetch.
     */
    orderBy?: FavoriteGameOrderByWithRelationInput | FavoriteGameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FavoriteGames.
     */
    cursor?: FavoriteGameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavoriteGames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavoriteGames.
     */
    skip?: number
    distinct?: FavoriteGameScalarFieldEnum | FavoriteGameScalarFieldEnum[]
  }

  /**
   * FavoriteGame create
   */
  export type FavoriteGameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameInclude<ExtArgs> | null
    /**
     * The data needed to create a FavoriteGame.
     */
    data: XOR<FavoriteGameCreateInput, FavoriteGameUncheckedCreateInput>
  }

  /**
   * FavoriteGame createMany
   */
  export type FavoriteGameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FavoriteGames.
     */
    data: FavoriteGameCreateManyInput | FavoriteGameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FavoriteGame createManyAndReturn
   */
  export type FavoriteGameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * The data used to create many FavoriteGames.
     */
    data: FavoriteGameCreateManyInput | FavoriteGameCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FavoriteGame update
   */
  export type FavoriteGameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameInclude<ExtArgs> | null
    /**
     * The data needed to update a FavoriteGame.
     */
    data: XOR<FavoriteGameUpdateInput, FavoriteGameUncheckedUpdateInput>
    /**
     * Choose, which FavoriteGame to update.
     */
    where: FavoriteGameWhereUniqueInput
  }

  /**
   * FavoriteGame updateMany
   */
  export type FavoriteGameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FavoriteGames.
     */
    data: XOR<FavoriteGameUpdateManyMutationInput, FavoriteGameUncheckedUpdateManyInput>
    /**
     * Filter which FavoriteGames to update
     */
    where?: FavoriteGameWhereInput
    /**
     * Limit how many FavoriteGames to update.
     */
    limit?: number
  }

  /**
   * FavoriteGame updateManyAndReturn
   */
  export type FavoriteGameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * The data used to update FavoriteGames.
     */
    data: XOR<FavoriteGameUpdateManyMutationInput, FavoriteGameUncheckedUpdateManyInput>
    /**
     * Filter which FavoriteGames to update
     */
    where?: FavoriteGameWhereInput
    /**
     * Limit how many FavoriteGames to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FavoriteGame upsert
   */
  export type FavoriteGameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameInclude<ExtArgs> | null
    /**
     * The filter to search for the FavoriteGame to update in case it exists.
     */
    where: FavoriteGameWhereUniqueInput
    /**
     * In case the FavoriteGame found by the `where` argument doesn't exist, create a new FavoriteGame with this data.
     */
    create: XOR<FavoriteGameCreateInput, FavoriteGameUncheckedCreateInput>
    /**
     * In case the FavoriteGame was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoriteGameUpdateInput, FavoriteGameUncheckedUpdateInput>
  }

  /**
   * FavoriteGame delete
   */
  export type FavoriteGameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameInclude<ExtArgs> | null
    /**
     * Filter which FavoriteGame to delete.
     */
    where: FavoriteGameWhereUniqueInput
  }

  /**
   * FavoriteGame deleteMany
   */
  export type FavoriteGameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavoriteGames to delete
     */
    where?: FavoriteGameWhereInput
    /**
     * Limit how many FavoriteGames to delete.
     */
    limit?: number
  }

  /**
   * FavoriteGame without action
   */
  export type FavoriteGameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavoriteGame
     */
    select?: FavoriteGameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FavoriteGame
     */
    omit?: FavoriteGameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavoriteGameInclude<ExtArgs> | null
  }


  /**
   * Model WatchParty
   */

  export type AggregateWatchParty = {
    _count: WatchPartyCountAggregateOutputType | null
    _avg: WatchPartyAvgAggregateOutputType | null
    _sum: WatchPartySumAggregateOutputType | null
    _min: WatchPartyMinAggregateOutputType | null
    _max: WatchPartyMaxAggregateOutputType | null
  }

  export type WatchPartyAvgAggregateOutputType = {
    id: number | null
    maxUsers: number | null
    hostId: number | null
    gameId: number | null
  }

  export type WatchPartySumAggregateOutputType = {
    id: number | null
    maxUsers: number | null
    hostId: number | null
    gameId: number | null
  }

  export type WatchPartyMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    isPrivate: boolean | null
    maxUsers: number | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hostId: number | null
    gameId: number | null
  }

  export type WatchPartyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    isPrivate: boolean | null
    maxUsers: number | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hostId: number | null
    gameId: number | null
  }

  export type WatchPartyCountAggregateOutputType = {
    id: number
    name: number
    description: number
    isPrivate: number
    maxUsers: number
    password: number
    createdAt: number
    updatedAt: number
    hostId: number
    gameId: number
    _all: number
  }


  export type WatchPartyAvgAggregateInputType = {
    id?: true
    maxUsers?: true
    hostId?: true
    gameId?: true
  }

  export type WatchPartySumAggregateInputType = {
    id?: true
    maxUsers?: true
    hostId?: true
    gameId?: true
  }

  export type WatchPartyMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isPrivate?: true
    maxUsers?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    hostId?: true
    gameId?: true
  }

  export type WatchPartyMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isPrivate?: true
    maxUsers?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    hostId?: true
    gameId?: true
  }

  export type WatchPartyCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isPrivate?: true
    maxUsers?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    hostId?: true
    gameId?: true
    _all?: true
  }

  export type WatchPartyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WatchParty to aggregate.
     */
    where?: WatchPartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchParties to fetch.
     */
    orderBy?: WatchPartyOrderByWithRelationInput | WatchPartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WatchPartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchParties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchParties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WatchParties
    **/
    _count?: true | WatchPartyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WatchPartyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WatchPartySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WatchPartyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WatchPartyMaxAggregateInputType
  }

  export type GetWatchPartyAggregateType<T extends WatchPartyAggregateArgs> = {
        [P in keyof T & keyof AggregateWatchParty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWatchParty[P]>
      : GetScalarType<T[P], AggregateWatchParty[P]>
  }




  export type WatchPartyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchPartyWhereInput
    orderBy?: WatchPartyOrderByWithAggregationInput | WatchPartyOrderByWithAggregationInput[]
    by: WatchPartyScalarFieldEnum[] | WatchPartyScalarFieldEnum
    having?: WatchPartyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WatchPartyCountAggregateInputType | true
    _avg?: WatchPartyAvgAggregateInputType
    _sum?: WatchPartySumAggregateInputType
    _min?: WatchPartyMinAggregateInputType
    _max?: WatchPartyMaxAggregateInputType
  }

  export type WatchPartyGroupByOutputType = {
    id: number
    name: string
    description: string
    isPrivate: boolean
    maxUsers: number
    password: string | null
    createdAt: Date
    updatedAt: Date
    hostId: number
    gameId: number | null
    _count: WatchPartyCountAggregateOutputType | null
    _avg: WatchPartyAvgAggregateOutputType | null
    _sum: WatchPartySumAggregateOutputType | null
    _min: WatchPartyMinAggregateOutputType | null
    _max: WatchPartyMaxAggregateOutputType | null
  }

  type GetWatchPartyGroupByPayload<T extends WatchPartyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WatchPartyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WatchPartyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WatchPartyGroupByOutputType[P]>
            : GetScalarType<T[P], WatchPartyGroupByOutputType[P]>
        }
      >
    >


  export type WatchPartySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isPrivate?: boolean
    maxUsers?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostId?: boolean
    gameId?: boolean
    host?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | WatchParty$gameArgs<ExtArgs>
    particpants?: boolean | WatchParty$particpantsArgs<ExtArgs>
    _count?: boolean | WatchPartyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchParty"]>

  export type WatchPartySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isPrivate?: boolean
    maxUsers?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostId?: boolean
    gameId?: boolean
    host?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | WatchParty$gameArgs<ExtArgs>
  }, ExtArgs["result"]["watchParty"]>

  export type WatchPartySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isPrivate?: boolean
    maxUsers?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostId?: boolean
    gameId?: boolean
    host?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | WatchParty$gameArgs<ExtArgs>
  }, ExtArgs["result"]["watchParty"]>

  export type WatchPartySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    isPrivate?: boolean
    maxUsers?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostId?: boolean
    gameId?: boolean
  }

  export type WatchPartyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "isPrivate" | "maxUsers" | "password" | "createdAt" | "updatedAt" | "hostId" | "gameId", ExtArgs["result"]["watchParty"]>
  export type WatchPartyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    host?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | WatchParty$gameArgs<ExtArgs>
    particpants?: boolean | WatchParty$particpantsArgs<ExtArgs>
    _count?: boolean | WatchPartyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WatchPartyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    host?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | WatchParty$gameArgs<ExtArgs>
  }
  export type WatchPartyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    host?: boolean | UserDefaultArgs<ExtArgs>
    game?: boolean | WatchParty$gameArgs<ExtArgs>
  }

  export type $WatchPartyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WatchParty"
    objects: {
      host: Prisma.$UserPayload<ExtArgs>
      game: Prisma.$GamePayload<ExtArgs> | null
      particpants: Prisma.$WatchPartyParticipantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      isPrivate: boolean
      maxUsers: number
      password: string | null
      createdAt: Date
      updatedAt: Date
      hostId: number
      gameId: number | null
    }, ExtArgs["result"]["watchParty"]>
    composites: {}
  }

  type WatchPartyGetPayload<S extends boolean | null | undefined | WatchPartyDefaultArgs> = $Result.GetResult<Prisma.$WatchPartyPayload, S>

  type WatchPartyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WatchPartyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WatchPartyCountAggregateInputType | true
    }

  export interface WatchPartyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WatchParty'], meta: { name: 'WatchParty' } }
    /**
     * Find zero or one WatchParty that matches the filter.
     * @param {WatchPartyFindUniqueArgs} args - Arguments to find a WatchParty
     * @example
     * // Get one WatchParty
     * const watchParty = await prisma.watchParty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WatchPartyFindUniqueArgs>(args: SelectSubset<T, WatchPartyFindUniqueArgs<ExtArgs>>): Prisma__WatchPartyClient<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WatchParty that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WatchPartyFindUniqueOrThrowArgs} args - Arguments to find a WatchParty
     * @example
     * // Get one WatchParty
     * const watchParty = await prisma.watchParty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WatchPartyFindUniqueOrThrowArgs>(args: SelectSubset<T, WatchPartyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WatchPartyClient<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WatchParty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyFindFirstArgs} args - Arguments to find a WatchParty
     * @example
     * // Get one WatchParty
     * const watchParty = await prisma.watchParty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WatchPartyFindFirstArgs>(args?: SelectSubset<T, WatchPartyFindFirstArgs<ExtArgs>>): Prisma__WatchPartyClient<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WatchParty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyFindFirstOrThrowArgs} args - Arguments to find a WatchParty
     * @example
     * // Get one WatchParty
     * const watchParty = await prisma.watchParty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WatchPartyFindFirstOrThrowArgs>(args?: SelectSubset<T, WatchPartyFindFirstOrThrowArgs<ExtArgs>>): Prisma__WatchPartyClient<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WatchParties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WatchParties
     * const watchParties = await prisma.watchParty.findMany()
     * 
     * // Get first 10 WatchParties
     * const watchParties = await prisma.watchParty.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const watchPartyWithIdOnly = await prisma.watchParty.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WatchPartyFindManyArgs>(args?: SelectSubset<T, WatchPartyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WatchParty.
     * @param {WatchPartyCreateArgs} args - Arguments to create a WatchParty.
     * @example
     * // Create one WatchParty
     * const WatchParty = await prisma.watchParty.create({
     *   data: {
     *     // ... data to create a WatchParty
     *   }
     * })
     * 
     */
    create<T extends WatchPartyCreateArgs>(args: SelectSubset<T, WatchPartyCreateArgs<ExtArgs>>): Prisma__WatchPartyClient<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WatchParties.
     * @param {WatchPartyCreateManyArgs} args - Arguments to create many WatchParties.
     * @example
     * // Create many WatchParties
     * const watchParty = await prisma.watchParty.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WatchPartyCreateManyArgs>(args?: SelectSubset<T, WatchPartyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WatchParties and returns the data saved in the database.
     * @param {WatchPartyCreateManyAndReturnArgs} args - Arguments to create many WatchParties.
     * @example
     * // Create many WatchParties
     * const watchParty = await prisma.watchParty.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WatchParties and only return the `id`
     * const watchPartyWithIdOnly = await prisma.watchParty.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WatchPartyCreateManyAndReturnArgs>(args?: SelectSubset<T, WatchPartyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WatchParty.
     * @param {WatchPartyDeleteArgs} args - Arguments to delete one WatchParty.
     * @example
     * // Delete one WatchParty
     * const WatchParty = await prisma.watchParty.delete({
     *   where: {
     *     // ... filter to delete one WatchParty
     *   }
     * })
     * 
     */
    delete<T extends WatchPartyDeleteArgs>(args: SelectSubset<T, WatchPartyDeleteArgs<ExtArgs>>): Prisma__WatchPartyClient<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WatchParty.
     * @param {WatchPartyUpdateArgs} args - Arguments to update one WatchParty.
     * @example
     * // Update one WatchParty
     * const watchParty = await prisma.watchParty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WatchPartyUpdateArgs>(args: SelectSubset<T, WatchPartyUpdateArgs<ExtArgs>>): Prisma__WatchPartyClient<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WatchParties.
     * @param {WatchPartyDeleteManyArgs} args - Arguments to filter WatchParties to delete.
     * @example
     * // Delete a few WatchParties
     * const { count } = await prisma.watchParty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WatchPartyDeleteManyArgs>(args?: SelectSubset<T, WatchPartyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WatchParties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WatchParties
     * const watchParty = await prisma.watchParty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WatchPartyUpdateManyArgs>(args: SelectSubset<T, WatchPartyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WatchParties and returns the data updated in the database.
     * @param {WatchPartyUpdateManyAndReturnArgs} args - Arguments to update many WatchParties.
     * @example
     * // Update many WatchParties
     * const watchParty = await prisma.watchParty.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WatchParties and only return the `id`
     * const watchPartyWithIdOnly = await prisma.watchParty.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WatchPartyUpdateManyAndReturnArgs>(args: SelectSubset<T, WatchPartyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WatchParty.
     * @param {WatchPartyUpsertArgs} args - Arguments to update or create a WatchParty.
     * @example
     * // Update or create a WatchParty
     * const watchParty = await prisma.watchParty.upsert({
     *   create: {
     *     // ... data to create a WatchParty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WatchParty we want to update
     *   }
     * })
     */
    upsert<T extends WatchPartyUpsertArgs>(args: SelectSubset<T, WatchPartyUpsertArgs<ExtArgs>>): Prisma__WatchPartyClient<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WatchParties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyCountArgs} args - Arguments to filter WatchParties to count.
     * @example
     * // Count the number of WatchParties
     * const count = await prisma.watchParty.count({
     *   where: {
     *     // ... the filter for the WatchParties we want to count
     *   }
     * })
    **/
    count<T extends WatchPartyCountArgs>(
      args?: Subset<T, WatchPartyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WatchPartyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WatchParty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WatchPartyAggregateArgs>(args: Subset<T, WatchPartyAggregateArgs>): Prisma.PrismaPromise<GetWatchPartyAggregateType<T>>

    /**
     * Group by WatchParty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WatchPartyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WatchPartyGroupByArgs['orderBy'] }
        : { orderBy?: WatchPartyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WatchPartyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWatchPartyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WatchParty model
   */
  readonly fields: WatchPartyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WatchParty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WatchPartyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    host<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    game<T extends WatchParty$gameArgs<ExtArgs> = {}>(args?: Subset<T, WatchParty$gameArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    particpants<T extends WatchParty$particpantsArgs<ExtArgs> = {}>(args?: Subset<T, WatchParty$particpantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WatchParty model
   */
  interface WatchPartyFieldRefs {
    readonly id: FieldRef<"WatchParty", 'Int'>
    readonly name: FieldRef<"WatchParty", 'String'>
    readonly description: FieldRef<"WatchParty", 'String'>
    readonly isPrivate: FieldRef<"WatchParty", 'Boolean'>
    readonly maxUsers: FieldRef<"WatchParty", 'Int'>
    readonly password: FieldRef<"WatchParty", 'String'>
    readonly createdAt: FieldRef<"WatchParty", 'DateTime'>
    readonly updatedAt: FieldRef<"WatchParty", 'DateTime'>
    readonly hostId: FieldRef<"WatchParty", 'Int'>
    readonly gameId: FieldRef<"WatchParty", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WatchParty findUnique
   */
  export type WatchPartyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyInclude<ExtArgs> | null
    /**
     * Filter, which WatchParty to fetch.
     */
    where: WatchPartyWhereUniqueInput
  }

  /**
   * WatchParty findUniqueOrThrow
   */
  export type WatchPartyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyInclude<ExtArgs> | null
    /**
     * Filter, which WatchParty to fetch.
     */
    where: WatchPartyWhereUniqueInput
  }

  /**
   * WatchParty findFirst
   */
  export type WatchPartyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyInclude<ExtArgs> | null
    /**
     * Filter, which WatchParty to fetch.
     */
    where?: WatchPartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchParties to fetch.
     */
    orderBy?: WatchPartyOrderByWithRelationInput | WatchPartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WatchParties.
     */
    cursor?: WatchPartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchParties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchParties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WatchParties.
     */
    distinct?: WatchPartyScalarFieldEnum | WatchPartyScalarFieldEnum[]
  }

  /**
   * WatchParty findFirstOrThrow
   */
  export type WatchPartyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyInclude<ExtArgs> | null
    /**
     * Filter, which WatchParty to fetch.
     */
    where?: WatchPartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchParties to fetch.
     */
    orderBy?: WatchPartyOrderByWithRelationInput | WatchPartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WatchParties.
     */
    cursor?: WatchPartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchParties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchParties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WatchParties.
     */
    distinct?: WatchPartyScalarFieldEnum | WatchPartyScalarFieldEnum[]
  }

  /**
   * WatchParty findMany
   */
  export type WatchPartyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyInclude<ExtArgs> | null
    /**
     * Filter, which WatchParties to fetch.
     */
    where?: WatchPartyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchParties to fetch.
     */
    orderBy?: WatchPartyOrderByWithRelationInput | WatchPartyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WatchParties.
     */
    cursor?: WatchPartyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchParties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchParties.
     */
    skip?: number
    distinct?: WatchPartyScalarFieldEnum | WatchPartyScalarFieldEnum[]
  }

  /**
   * WatchParty create
   */
  export type WatchPartyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyInclude<ExtArgs> | null
    /**
     * The data needed to create a WatchParty.
     */
    data: XOR<WatchPartyCreateInput, WatchPartyUncheckedCreateInput>
  }

  /**
   * WatchParty createMany
   */
  export type WatchPartyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WatchParties.
     */
    data: WatchPartyCreateManyInput | WatchPartyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WatchParty createManyAndReturn
   */
  export type WatchPartyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * The data used to create many WatchParties.
     */
    data: WatchPartyCreateManyInput | WatchPartyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WatchParty update
   */
  export type WatchPartyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyInclude<ExtArgs> | null
    /**
     * The data needed to update a WatchParty.
     */
    data: XOR<WatchPartyUpdateInput, WatchPartyUncheckedUpdateInput>
    /**
     * Choose, which WatchParty to update.
     */
    where: WatchPartyWhereUniqueInput
  }

  /**
   * WatchParty updateMany
   */
  export type WatchPartyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WatchParties.
     */
    data: XOR<WatchPartyUpdateManyMutationInput, WatchPartyUncheckedUpdateManyInput>
    /**
     * Filter which WatchParties to update
     */
    where?: WatchPartyWhereInput
    /**
     * Limit how many WatchParties to update.
     */
    limit?: number
  }

  /**
   * WatchParty updateManyAndReturn
   */
  export type WatchPartyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * The data used to update WatchParties.
     */
    data: XOR<WatchPartyUpdateManyMutationInput, WatchPartyUncheckedUpdateManyInput>
    /**
     * Filter which WatchParties to update
     */
    where?: WatchPartyWhereInput
    /**
     * Limit how many WatchParties to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WatchParty upsert
   */
  export type WatchPartyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyInclude<ExtArgs> | null
    /**
     * The filter to search for the WatchParty to update in case it exists.
     */
    where: WatchPartyWhereUniqueInput
    /**
     * In case the WatchParty found by the `where` argument doesn't exist, create a new WatchParty with this data.
     */
    create: XOR<WatchPartyCreateInput, WatchPartyUncheckedCreateInput>
    /**
     * In case the WatchParty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WatchPartyUpdateInput, WatchPartyUncheckedUpdateInput>
  }

  /**
   * WatchParty delete
   */
  export type WatchPartyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyInclude<ExtArgs> | null
    /**
     * Filter which WatchParty to delete.
     */
    where: WatchPartyWhereUniqueInput
  }

  /**
   * WatchParty deleteMany
   */
  export type WatchPartyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WatchParties to delete
     */
    where?: WatchPartyWhereInput
    /**
     * Limit how many WatchParties to delete.
     */
    limit?: number
  }

  /**
   * WatchParty.game
   */
  export type WatchParty$gameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
  }

  /**
   * WatchParty.particpants
   */
  export type WatchParty$particpantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantInclude<ExtArgs> | null
    where?: WatchPartyParticipantWhereInput
    orderBy?: WatchPartyParticipantOrderByWithRelationInput | WatchPartyParticipantOrderByWithRelationInput[]
    cursor?: WatchPartyParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchPartyParticipantScalarFieldEnum | WatchPartyParticipantScalarFieldEnum[]
  }

  /**
   * WatchParty without action
   */
  export type WatchPartyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchParty
     */
    select?: WatchPartySelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchParty
     */
    omit?: WatchPartyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyInclude<ExtArgs> | null
  }


  /**
   * Model WatchPartyParticipant
   */

  export type AggregateWatchPartyParticipant = {
    _count: WatchPartyParticipantCountAggregateOutputType | null
    _avg: WatchPartyParticipantAvgAggregateOutputType | null
    _sum: WatchPartyParticipantSumAggregateOutputType | null
    _min: WatchPartyParticipantMinAggregateOutputType | null
    _max: WatchPartyParticipantMaxAggregateOutputType | null
  }

  export type WatchPartyParticipantAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    watchPartyId: number | null
  }

  export type WatchPartyParticipantSumAggregateOutputType = {
    id: number | null
    userId: number | null
    watchPartyId: number | null
  }

  export type WatchPartyParticipantMinAggregateOutputType = {
    id: number | null
    joinedAt: Date | null
    userId: number | null
    watchPartyId: number | null
  }

  export type WatchPartyParticipantMaxAggregateOutputType = {
    id: number | null
    joinedAt: Date | null
    userId: number | null
    watchPartyId: number | null
  }

  export type WatchPartyParticipantCountAggregateOutputType = {
    id: number
    joinedAt: number
    userId: number
    watchPartyId: number
    _all: number
  }


  export type WatchPartyParticipantAvgAggregateInputType = {
    id?: true
    userId?: true
    watchPartyId?: true
  }

  export type WatchPartyParticipantSumAggregateInputType = {
    id?: true
    userId?: true
    watchPartyId?: true
  }

  export type WatchPartyParticipantMinAggregateInputType = {
    id?: true
    joinedAt?: true
    userId?: true
    watchPartyId?: true
  }

  export type WatchPartyParticipantMaxAggregateInputType = {
    id?: true
    joinedAt?: true
    userId?: true
    watchPartyId?: true
  }

  export type WatchPartyParticipantCountAggregateInputType = {
    id?: true
    joinedAt?: true
    userId?: true
    watchPartyId?: true
    _all?: true
  }

  export type WatchPartyParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WatchPartyParticipant to aggregate.
     */
    where?: WatchPartyParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchPartyParticipants to fetch.
     */
    orderBy?: WatchPartyParticipantOrderByWithRelationInput | WatchPartyParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WatchPartyParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchPartyParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchPartyParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WatchPartyParticipants
    **/
    _count?: true | WatchPartyParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WatchPartyParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WatchPartyParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WatchPartyParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WatchPartyParticipantMaxAggregateInputType
  }

  export type GetWatchPartyParticipantAggregateType<T extends WatchPartyParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateWatchPartyParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWatchPartyParticipant[P]>
      : GetScalarType<T[P], AggregateWatchPartyParticipant[P]>
  }




  export type WatchPartyParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchPartyParticipantWhereInput
    orderBy?: WatchPartyParticipantOrderByWithAggregationInput | WatchPartyParticipantOrderByWithAggregationInput[]
    by: WatchPartyParticipantScalarFieldEnum[] | WatchPartyParticipantScalarFieldEnum
    having?: WatchPartyParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WatchPartyParticipantCountAggregateInputType | true
    _avg?: WatchPartyParticipantAvgAggregateInputType
    _sum?: WatchPartyParticipantSumAggregateInputType
    _min?: WatchPartyParticipantMinAggregateInputType
    _max?: WatchPartyParticipantMaxAggregateInputType
  }

  export type WatchPartyParticipantGroupByOutputType = {
    id: number
    joinedAt: Date
    userId: number
    watchPartyId: number
    _count: WatchPartyParticipantCountAggregateOutputType | null
    _avg: WatchPartyParticipantAvgAggregateOutputType | null
    _sum: WatchPartyParticipantSumAggregateOutputType | null
    _min: WatchPartyParticipantMinAggregateOutputType | null
    _max: WatchPartyParticipantMaxAggregateOutputType | null
  }

  type GetWatchPartyParticipantGroupByPayload<T extends WatchPartyParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WatchPartyParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WatchPartyParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WatchPartyParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], WatchPartyParticipantGroupByOutputType[P]>
        }
      >
    >


  export type WatchPartyParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joinedAt?: boolean
    userId?: boolean
    watchPartyId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    watchParty?: boolean | WatchPartyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchPartyParticipant"]>

  export type WatchPartyParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joinedAt?: boolean
    userId?: boolean
    watchPartyId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    watchParty?: boolean | WatchPartyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchPartyParticipant"]>

  export type WatchPartyParticipantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    joinedAt?: boolean
    userId?: boolean
    watchPartyId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    watchParty?: boolean | WatchPartyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchPartyParticipant"]>

  export type WatchPartyParticipantSelectScalar = {
    id?: boolean
    joinedAt?: boolean
    userId?: boolean
    watchPartyId?: boolean
  }

  export type WatchPartyParticipantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "joinedAt" | "userId" | "watchPartyId", ExtArgs["result"]["watchPartyParticipant"]>
  export type WatchPartyParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    watchParty?: boolean | WatchPartyDefaultArgs<ExtArgs>
  }
  export type WatchPartyParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    watchParty?: boolean | WatchPartyDefaultArgs<ExtArgs>
  }
  export type WatchPartyParticipantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    watchParty?: boolean | WatchPartyDefaultArgs<ExtArgs>
  }

  export type $WatchPartyParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WatchPartyParticipant"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      watchParty: Prisma.$WatchPartyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      joinedAt: Date
      userId: number
      watchPartyId: number
    }, ExtArgs["result"]["watchPartyParticipant"]>
    composites: {}
  }

  type WatchPartyParticipantGetPayload<S extends boolean | null | undefined | WatchPartyParticipantDefaultArgs> = $Result.GetResult<Prisma.$WatchPartyParticipantPayload, S>

  type WatchPartyParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WatchPartyParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WatchPartyParticipantCountAggregateInputType | true
    }

  export interface WatchPartyParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WatchPartyParticipant'], meta: { name: 'WatchPartyParticipant' } }
    /**
     * Find zero or one WatchPartyParticipant that matches the filter.
     * @param {WatchPartyParticipantFindUniqueArgs} args - Arguments to find a WatchPartyParticipant
     * @example
     * // Get one WatchPartyParticipant
     * const watchPartyParticipant = await prisma.watchPartyParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WatchPartyParticipantFindUniqueArgs>(args: SelectSubset<T, WatchPartyParticipantFindUniqueArgs<ExtArgs>>): Prisma__WatchPartyParticipantClient<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WatchPartyParticipant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WatchPartyParticipantFindUniqueOrThrowArgs} args - Arguments to find a WatchPartyParticipant
     * @example
     * // Get one WatchPartyParticipant
     * const watchPartyParticipant = await prisma.watchPartyParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WatchPartyParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, WatchPartyParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WatchPartyParticipantClient<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WatchPartyParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyParticipantFindFirstArgs} args - Arguments to find a WatchPartyParticipant
     * @example
     * // Get one WatchPartyParticipant
     * const watchPartyParticipant = await prisma.watchPartyParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WatchPartyParticipantFindFirstArgs>(args?: SelectSubset<T, WatchPartyParticipantFindFirstArgs<ExtArgs>>): Prisma__WatchPartyParticipantClient<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WatchPartyParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyParticipantFindFirstOrThrowArgs} args - Arguments to find a WatchPartyParticipant
     * @example
     * // Get one WatchPartyParticipant
     * const watchPartyParticipant = await prisma.watchPartyParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WatchPartyParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, WatchPartyParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__WatchPartyParticipantClient<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WatchPartyParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WatchPartyParticipants
     * const watchPartyParticipants = await prisma.watchPartyParticipant.findMany()
     * 
     * // Get first 10 WatchPartyParticipants
     * const watchPartyParticipants = await prisma.watchPartyParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const watchPartyParticipantWithIdOnly = await prisma.watchPartyParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WatchPartyParticipantFindManyArgs>(args?: SelectSubset<T, WatchPartyParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WatchPartyParticipant.
     * @param {WatchPartyParticipantCreateArgs} args - Arguments to create a WatchPartyParticipant.
     * @example
     * // Create one WatchPartyParticipant
     * const WatchPartyParticipant = await prisma.watchPartyParticipant.create({
     *   data: {
     *     // ... data to create a WatchPartyParticipant
     *   }
     * })
     * 
     */
    create<T extends WatchPartyParticipantCreateArgs>(args: SelectSubset<T, WatchPartyParticipantCreateArgs<ExtArgs>>): Prisma__WatchPartyParticipantClient<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WatchPartyParticipants.
     * @param {WatchPartyParticipantCreateManyArgs} args - Arguments to create many WatchPartyParticipants.
     * @example
     * // Create many WatchPartyParticipants
     * const watchPartyParticipant = await prisma.watchPartyParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WatchPartyParticipantCreateManyArgs>(args?: SelectSubset<T, WatchPartyParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WatchPartyParticipants and returns the data saved in the database.
     * @param {WatchPartyParticipantCreateManyAndReturnArgs} args - Arguments to create many WatchPartyParticipants.
     * @example
     * // Create many WatchPartyParticipants
     * const watchPartyParticipant = await prisma.watchPartyParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WatchPartyParticipants and only return the `id`
     * const watchPartyParticipantWithIdOnly = await prisma.watchPartyParticipant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WatchPartyParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, WatchPartyParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WatchPartyParticipant.
     * @param {WatchPartyParticipantDeleteArgs} args - Arguments to delete one WatchPartyParticipant.
     * @example
     * // Delete one WatchPartyParticipant
     * const WatchPartyParticipant = await prisma.watchPartyParticipant.delete({
     *   where: {
     *     // ... filter to delete one WatchPartyParticipant
     *   }
     * })
     * 
     */
    delete<T extends WatchPartyParticipantDeleteArgs>(args: SelectSubset<T, WatchPartyParticipantDeleteArgs<ExtArgs>>): Prisma__WatchPartyParticipantClient<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WatchPartyParticipant.
     * @param {WatchPartyParticipantUpdateArgs} args - Arguments to update one WatchPartyParticipant.
     * @example
     * // Update one WatchPartyParticipant
     * const watchPartyParticipant = await prisma.watchPartyParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WatchPartyParticipantUpdateArgs>(args: SelectSubset<T, WatchPartyParticipantUpdateArgs<ExtArgs>>): Prisma__WatchPartyParticipantClient<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WatchPartyParticipants.
     * @param {WatchPartyParticipantDeleteManyArgs} args - Arguments to filter WatchPartyParticipants to delete.
     * @example
     * // Delete a few WatchPartyParticipants
     * const { count } = await prisma.watchPartyParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WatchPartyParticipantDeleteManyArgs>(args?: SelectSubset<T, WatchPartyParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WatchPartyParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WatchPartyParticipants
     * const watchPartyParticipant = await prisma.watchPartyParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WatchPartyParticipantUpdateManyArgs>(args: SelectSubset<T, WatchPartyParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WatchPartyParticipants and returns the data updated in the database.
     * @param {WatchPartyParticipantUpdateManyAndReturnArgs} args - Arguments to update many WatchPartyParticipants.
     * @example
     * // Update many WatchPartyParticipants
     * const watchPartyParticipant = await prisma.watchPartyParticipant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WatchPartyParticipants and only return the `id`
     * const watchPartyParticipantWithIdOnly = await prisma.watchPartyParticipant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WatchPartyParticipantUpdateManyAndReturnArgs>(args: SelectSubset<T, WatchPartyParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WatchPartyParticipant.
     * @param {WatchPartyParticipantUpsertArgs} args - Arguments to update or create a WatchPartyParticipant.
     * @example
     * // Update or create a WatchPartyParticipant
     * const watchPartyParticipant = await prisma.watchPartyParticipant.upsert({
     *   create: {
     *     // ... data to create a WatchPartyParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WatchPartyParticipant we want to update
     *   }
     * })
     */
    upsert<T extends WatchPartyParticipantUpsertArgs>(args: SelectSubset<T, WatchPartyParticipantUpsertArgs<ExtArgs>>): Prisma__WatchPartyParticipantClient<$Result.GetResult<Prisma.$WatchPartyParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WatchPartyParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyParticipantCountArgs} args - Arguments to filter WatchPartyParticipants to count.
     * @example
     * // Count the number of WatchPartyParticipants
     * const count = await prisma.watchPartyParticipant.count({
     *   where: {
     *     // ... the filter for the WatchPartyParticipants we want to count
     *   }
     * })
    **/
    count<T extends WatchPartyParticipantCountArgs>(
      args?: Subset<T, WatchPartyParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WatchPartyParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WatchPartyParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WatchPartyParticipantAggregateArgs>(args: Subset<T, WatchPartyParticipantAggregateArgs>): Prisma.PrismaPromise<GetWatchPartyParticipantAggregateType<T>>

    /**
     * Group by WatchPartyParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchPartyParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WatchPartyParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WatchPartyParticipantGroupByArgs['orderBy'] }
        : { orderBy?: WatchPartyParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WatchPartyParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWatchPartyParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WatchPartyParticipant model
   */
  readonly fields: WatchPartyParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WatchPartyParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WatchPartyParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    watchParty<T extends WatchPartyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WatchPartyDefaultArgs<ExtArgs>>): Prisma__WatchPartyClient<$Result.GetResult<Prisma.$WatchPartyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WatchPartyParticipant model
   */
  interface WatchPartyParticipantFieldRefs {
    readonly id: FieldRef<"WatchPartyParticipant", 'Int'>
    readonly joinedAt: FieldRef<"WatchPartyParticipant", 'DateTime'>
    readonly userId: FieldRef<"WatchPartyParticipant", 'Int'>
    readonly watchPartyId: FieldRef<"WatchPartyParticipant", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WatchPartyParticipant findUnique
   */
  export type WatchPartyParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which WatchPartyParticipant to fetch.
     */
    where: WatchPartyParticipantWhereUniqueInput
  }

  /**
   * WatchPartyParticipant findUniqueOrThrow
   */
  export type WatchPartyParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which WatchPartyParticipant to fetch.
     */
    where: WatchPartyParticipantWhereUniqueInput
  }

  /**
   * WatchPartyParticipant findFirst
   */
  export type WatchPartyParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which WatchPartyParticipant to fetch.
     */
    where?: WatchPartyParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchPartyParticipants to fetch.
     */
    orderBy?: WatchPartyParticipantOrderByWithRelationInput | WatchPartyParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WatchPartyParticipants.
     */
    cursor?: WatchPartyParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchPartyParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchPartyParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WatchPartyParticipants.
     */
    distinct?: WatchPartyParticipantScalarFieldEnum | WatchPartyParticipantScalarFieldEnum[]
  }

  /**
   * WatchPartyParticipant findFirstOrThrow
   */
  export type WatchPartyParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which WatchPartyParticipant to fetch.
     */
    where?: WatchPartyParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchPartyParticipants to fetch.
     */
    orderBy?: WatchPartyParticipantOrderByWithRelationInput | WatchPartyParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WatchPartyParticipants.
     */
    cursor?: WatchPartyParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchPartyParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchPartyParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WatchPartyParticipants.
     */
    distinct?: WatchPartyParticipantScalarFieldEnum | WatchPartyParticipantScalarFieldEnum[]
  }

  /**
   * WatchPartyParticipant findMany
   */
  export type WatchPartyParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which WatchPartyParticipants to fetch.
     */
    where?: WatchPartyParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WatchPartyParticipants to fetch.
     */
    orderBy?: WatchPartyParticipantOrderByWithRelationInput | WatchPartyParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WatchPartyParticipants.
     */
    cursor?: WatchPartyParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WatchPartyParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WatchPartyParticipants.
     */
    skip?: number
    distinct?: WatchPartyParticipantScalarFieldEnum | WatchPartyParticipantScalarFieldEnum[]
  }

  /**
   * WatchPartyParticipant create
   */
  export type WatchPartyParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a WatchPartyParticipant.
     */
    data: XOR<WatchPartyParticipantCreateInput, WatchPartyParticipantUncheckedCreateInput>
  }

  /**
   * WatchPartyParticipant createMany
   */
  export type WatchPartyParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WatchPartyParticipants.
     */
    data: WatchPartyParticipantCreateManyInput | WatchPartyParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WatchPartyParticipant createManyAndReturn
   */
  export type WatchPartyParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * The data used to create many WatchPartyParticipants.
     */
    data: WatchPartyParticipantCreateManyInput | WatchPartyParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WatchPartyParticipant update
   */
  export type WatchPartyParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a WatchPartyParticipant.
     */
    data: XOR<WatchPartyParticipantUpdateInput, WatchPartyParticipantUncheckedUpdateInput>
    /**
     * Choose, which WatchPartyParticipant to update.
     */
    where: WatchPartyParticipantWhereUniqueInput
  }

  /**
   * WatchPartyParticipant updateMany
   */
  export type WatchPartyParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WatchPartyParticipants.
     */
    data: XOR<WatchPartyParticipantUpdateManyMutationInput, WatchPartyParticipantUncheckedUpdateManyInput>
    /**
     * Filter which WatchPartyParticipants to update
     */
    where?: WatchPartyParticipantWhereInput
    /**
     * Limit how many WatchPartyParticipants to update.
     */
    limit?: number
  }

  /**
   * WatchPartyParticipant updateManyAndReturn
   */
  export type WatchPartyParticipantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * The data used to update WatchPartyParticipants.
     */
    data: XOR<WatchPartyParticipantUpdateManyMutationInput, WatchPartyParticipantUncheckedUpdateManyInput>
    /**
     * Filter which WatchPartyParticipants to update
     */
    where?: WatchPartyParticipantWhereInput
    /**
     * Limit how many WatchPartyParticipants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WatchPartyParticipant upsert
   */
  export type WatchPartyParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the WatchPartyParticipant to update in case it exists.
     */
    where: WatchPartyParticipantWhereUniqueInput
    /**
     * In case the WatchPartyParticipant found by the `where` argument doesn't exist, create a new WatchPartyParticipant with this data.
     */
    create: XOR<WatchPartyParticipantCreateInput, WatchPartyParticipantUncheckedCreateInput>
    /**
     * In case the WatchPartyParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WatchPartyParticipantUpdateInput, WatchPartyParticipantUncheckedUpdateInput>
  }

  /**
   * WatchPartyParticipant delete
   */
  export type WatchPartyParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantInclude<ExtArgs> | null
    /**
     * Filter which WatchPartyParticipant to delete.
     */
    where: WatchPartyParticipantWhereUniqueInput
  }

  /**
   * WatchPartyParticipant deleteMany
   */
  export type WatchPartyParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WatchPartyParticipants to delete
     */
    where?: WatchPartyParticipantWhereInput
    /**
     * Limit how many WatchPartyParticipants to delete.
     */
    limit?: number
  }

  /**
   * WatchPartyParticipant without action
   */
  export type WatchPartyParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchPartyParticipant
     */
    select?: WatchPartyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WatchPartyParticipant
     */
    omit?: WatchPartyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchPartyParticipantInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    homeTeam: 'homeTeam',
    awayTeam: 'awayTeam',
    homeScore: 'homeScore',
    awayScore: 'awayScore',
    quarter: 'quarter',
    timeLeft: 'timeLeft',
    status: 'status',
    gameDate: 'gameDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    message: 'message',
    createdAt: 'createdAt',
    userId: 'userId',
    gameId: 'gameId'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const FavoriteGameScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    userId: 'userId',
    gameId: 'gameId'
  };

  export type FavoriteGameScalarFieldEnum = (typeof FavoriteGameScalarFieldEnum)[keyof typeof FavoriteGameScalarFieldEnum]


  export const WatchPartyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    isPrivate: 'isPrivate',
    maxUsers: 'maxUsers',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    hostId: 'hostId',
    gameId: 'gameId'
  };

  export type WatchPartyScalarFieldEnum = (typeof WatchPartyScalarFieldEnum)[keyof typeof WatchPartyScalarFieldEnum]


  export const WatchPartyParticipantScalarFieldEnum: {
    id: 'id',
    joinedAt: 'joinedAt',
    userId: 'userId',
    watchPartyId: 'watchPartyId'
  };

  export type WatchPartyParticipantScalarFieldEnum = (typeof WatchPartyParticipantScalarFieldEnum)[keyof typeof WatchPartyParticipantScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'GameStatus'
   */
  export type EnumGameStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameStatus'>
    


  /**
   * Reference to a field of type 'GameStatus[]'
   */
  export type ListEnumGameStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GameStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    chatMessages?: ChatMessageListRelationFilter
    favoriteGames?: FavoriteGameListRelationFilter
    watchParties?: WatchPartyListRelationFilter
    participations?: WatchPartyParticipantListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatMessages?: ChatMessageOrderByRelationAggregateInput
    favoriteGames?: FavoriteGameOrderByRelationAggregateInput
    watchParties?: WatchPartyOrderByRelationAggregateInput
    participations?: WatchPartyParticipantOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    chatMessages?: ChatMessageListRelationFilter
    favoriteGames?: FavoriteGameListRelationFilter
    watchParties?: WatchPartyListRelationFilter
    participations?: WatchPartyParticipantListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: IntFilter<"Game"> | number
    homeTeam?: StringFilter<"Game"> | string
    awayTeam?: StringFilter<"Game"> | string
    homeScore?: IntFilter<"Game"> | number
    awayScore?: IntFilter<"Game"> | number
    quarter?: IntFilter<"Game"> | number
    timeLeft?: StringFilter<"Game"> | string
    status?: EnumGameStatusFilter<"Game"> | $Enums.GameStatus
    gameDate?: DateTimeFilter<"Game"> | Date | string
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    chatMessages?: ChatMessageListRelationFilter
    favoriteGames?: FavoriteGameListRelationFilter
    watchParties?: WatchPartyListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    homeTeam?: SortOrder
    awayTeam?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    quarter?: SortOrder
    timeLeft?: SortOrder
    status?: SortOrder
    gameDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chatMessages?: ChatMessageOrderByRelationAggregateInput
    favoriteGames?: FavoriteGameOrderByRelationAggregateInput
    watchParties?: WatchPartyOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    homeTeam?: StringFilter<"Game"> | string
    awayTeam?: StringFilter<"Game"> | string
    homeScore?: IntFilter<"Game"> | number
    awayScore?: IntFilter<"Game"> | number
    quarter?: IntFilter<"Game"> | number
    timeLeft?: StringFilter<"Game"> | string
    status?: EnumGameStatusFilter<"Game"> | $Enums.GameStatus
    gameDate?: DateTimeFilter<"Game"> | Date | string
    createdAt?: DateTimeFilter<"Game"> | Date | string
    updatedAt?: DateTimeFilter<"Game"> | Date | string
    chatMessages?: ChatMessageListRelationFilter
    favoriteGames?: FavoriteGameListRelationFilter
    watchParties?: WatchPartyListRelationFilter
  }, "id">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    homeTeam?: SortOrder
    awayTeam?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    quarter?: SortOrder
    timeLeft?: SortOrder
    status?: SortOrder
    gameDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Game"> | number
    homeTeam?: StringWithAggregatesFilter<"Game"> | string
    awayTeam?: StringWithAggregatesFilter<"Game"> | string
    homeScore?: IntWithAggregatesFilter<"Game"> | number
    awayScore?: IntWithAggregatesFilter<"Game"> | number
    quarter?: IntWithAggregatesFilter<"Game"> | number
    timeLeft?: StringWithAggregatesFilter<"Game"> | string
    status?: EnumGameStatusWithAggregatesFilter<"Game"> | $Enums.GameStatus
    gameDate?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Game"> | Date | string
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: IntFilter<"ChatMessage"> | number
    message?: StringFilter<"ChatMessage"> | string
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    userId?: IntFilter<"ChatMessage"> | number
    gameId?: IntFilter<"ChatMessage"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    user?: UserOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    message?: StringFilter<"ChatMessage"> | string
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    userId?: IntFilter<"ChatMessage"> | number
    gameId?: IntFilter<"ChatMessage"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _avg?: ChatMessageAvgOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
    _sum?: ChatMessageSumOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatMessage"> | number
    message?: StringWithAggregatesFilter<"ChatMessage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
    userId?: IntWithAggregatesFilter<"ChatMessage"> | number
    gameId?: IntWithAggregatesFilter<"ChatMessage"> | number
  }

  export type FavoriteGameWhereInput = {
    AND?: FavoriteGameWhereInput | FavoriteGameWhereInput[]
    OR?: FavoriteGameWhereInput[]
    NOT?: FavoriteGameWhereInput | FavoriteGameWhereInput[]
    id?: IntFilter<"FavoriteGame"> | number
    createdAt?: DateTimeFilter<"FavoriteGame"> | Date | string
    userId?: IntFilter<"FavoriteGame"> | number
    gameId?: IntFilter<"FavoriteGame"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
  }

  export type FavoriteGameOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    user?: UserOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
  }

  export type FavoriteGameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_gameId?: FavoriteGameUserIdGameIdCompoundUniqueInput
    AND?: FavoriteGameWhereInput | FavoriteGameWhereInput[]
    OR?: FavoriteGameWhereInput[]
    NOT?: FavoriteGameWhereInput | FavoriteGameWhereInput[]
    createdAt?: DateTimeFilter<"FavoriteGame"> | Date | string
    userId?: IntFilter<"FavoriteGame"> | number
    gameId?: IntFilter<"FavoriteGame"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
  }, "id" | "userId_gameId">

  export type FavoriteGameOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
    _count?: FavoriteGameCountOrderByAggregateInput
    _avg?: FavoriteGameAvgOrderByAggregateInput
    _max?: FavoriteGameMaxOrderByAggregateInput
    _min?: FavoriteGameMinOrderByAggregateInput
    _sum?: FavoriteGameSumOrderByAggregateInput
  }

  export type FavoriteGameScalarWhereWithAggregatesInput = {
    AND?: FavoriteGameScalarWhereWithAggregatesInput | FavoriteGameScalarWhereWithAggregatesInput[]
    OR?: FavoriteGameScalarWhereWithAggregatesInput[]
    NOT?: FavoriteGameScalarWhereWithAggregatesInput | FavoriteGameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FavoriteGame"> | number
    createdAt?: DateTimeWithAggregatesFilter<"FavoriteGame"> | Date | string
    userId?: IntWithAggregatesFilter<"FavoriteGame"> | number
    gameId?: IntWithAggregatesFilter<"FavoriteGame"> | number
  }

  export type WatchPartyWhereInput = {
    AND?: WatchPartyWhereInput | WatchPartyWhereInput[]
    OR?: WatchPartyWhereInput[]
    NOT?: WatchPartyWhereInput | WatchPartyWhereInput[]
    id?: IntFilter<"WatchParty"> | number
    name?: StringFilter<"WatchParty"> | string
    description?: StringFilter<"WatchParty"> | string
    isPrivate?: BoolFilter<"WatchParty"> | boolean
    maxUsers?: IntFilter<"WatchParty"> | number
    password?: StringNullableFilter<"WatchParty"> | string | null
    createdAt?: DateTimeFilter<"WatchParty"> | Date | string
    updatedAt?: DateTimeFilter<"WatchParty"> | Date | string
    hostId?: IntFilter<"WatchParty"> | number
    gameId?: IntNullableFilter<"WatchParty"> | number | null
    host?: XOR<UserScalarRelationFilter, UserWhereInput>
    game?: XOR<GameNullableScalarRelationFilter, GameWhereInput> | null
    particpants?: WatchPartyParticipantListRelationFilter
  }

  export type WatchPartyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isPrivate?: SortOrder
    maxUsers?: SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostId?: SortOrder
    gameId?: SortOrderInput | SortOrder
    host?: UserOrderByWithRelationInput
    game?: GameOrderByWithRelationInput
    particpants?: WatchPartyParticipantOrderByRelationAggregateInput
  }

  export type WatchPartyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WatchPartyWhereInput | WatchPartyWhereInput[]
    OR?: WatchPartyWhereInput[]
    NOT?: WatchPartyWhereInput | WatchPartyWhereInput[]
    name?: StringFilter<"WatchParty"> | string
    description?: StringFilter<"WatchParty"> | string
    isPrivate?: BoolFilter<"WatchParty"> | boolean
    maxUsers?: IntFilter<"WatchParty"> | number
    password?: StringNullableFilter<"WatchParty"> | string | null
    createdAt?: DateTimeFilter<"WatchParty"> | Date | string
    updatedAt?: DateTimeFilter<"WatchParty"> | Date | string
    hostId?: IntFilter<"WatchParty"> | number
    gameId?: IntNullableFilter<"WatchParty"> | number | null
    host?: XOR<UserScalarRelationFilter, UserWhereInput>
    game?: XOR<GameNullableScalarRelationFilter, GameWhereInput> | null
    particpants?: WatchPartyParticipantListRelationFilter
  }, "id">

  export type WatchPartyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isPrivate?: SortOrder
    maxUsers?: SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostId?: SortOrder
    gameId?: SortOrderInput | SortOrder
    _count?: WatchPartyCountOrderByAggregateInput
    _avg?: WatchPartyAvgOrderByAggregateInput
    _max?: WatchPartyMaxOrderByAggregateInput
    _min?: WatchPartyMinOrderByAggregateInput
    _sum?: WatchPartySumOrderByAggregateInput
  }

  export type WatchPartyScalarWhereWithAggregatesInput = {
    AND?: WatchPartyScalarWhereWithAggregatesInput | WatchPartyScalarWhereWithAggregatesInput[]
    OR?: WatchPartyScalarWhereWithAggregatesInput[]
    NOT?: WatchPartyScalarWhereWithAggregatesInput | WatchPartyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WatchParty"> | number
    name?: StringWithAggregatesFilter<"WatchParty"> | string
    description?: StringWithAggregatesFilter<"WatchParty"> | string
    isPrivate?: BoolWithAggregatesFilter<"WatchParty"> | boolean
    maxUsers?: IntWithAggregatesFilter<"WatchParty"> | number
    password?: StringNullableWithAggregatesFilter<"WatchParty"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WatchParty"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WatchParty"> | Date | string
    hostId?: IntWithAggregatesFilter<"WatchParty"> | number
    gameId?: IntNullableWithAggregatesFilter<"WatchParty"> | number | null
  }

  export type WatchPartyParticipantWhereInput = {
    AND?: WatchPartyParticipantWhereInput | WatchPartyParticipantWhereInput[]
    OR?: WatchPartyParticipantWhereInput[]
    NOT?: WatchPartyParticipantWhereInput | WatchPartyParticipantWhereInput[]
    id?: IntFilter<"WatchPartyParticipant"> | number
    joinedAt?: DateTimeFilter<"WatchPartyParticipant"> | Date | string
    userId?: IntFilter<"WatchPartyParticipant"> | number
    watchPartyId?: IntFilter<"WatchPartyParticipant"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    watchParty?: XOR<WatchPartyScalarRelationFilter, WatchPartyWhereInput>
  }

  export type WatchPartyParticipantOrderByWithRelationInput = {
    id?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    watchPartyId?: SortOrder
    user?: UserOrderByWithRelationInput
    watchParty?: WatchPartyOrderByWithRelationInput
  }

  export type WatchPartyParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_watchPartyId?: WatchPartyParticipantUserIdWatchPartyIdCompoundUniqueInput
    AND?: WatchPartyParticipantWhereInput | WatchPartyParticipantWhereInput[]
    OR?: WatchPartyParticipantWhereInput[]
    NOT?: WatchPartyParticipantWhereInput | WatchPartyParticipantWhereInput[]
    joinedAt?: DateTimeFilter<"WatchPartyParticipant"> | Date | string
    userId?: IntFilter<"WatchPartyParticipant"> | number
    watchPartyId?: IntFilter<"WatchPartyParticipant"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    watchParty?: XOR<WatchPartyScalarRelationFilter, WatchPartyWhereInput>
  }, "id" | "userId_watchPartyId">

  export type WatchPartyParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    watchPartyId?: SortOrder
    _count?: WatchPartyParticipantCountOrderByAggregateInput
    _avg?: WatchPartyParticipantAvgOrderByAggregateInput
    _max?: WatchPartyParticipantMaxOrderByAggregateInput
    _min?: WatchPartyParticipantMinOrderByAggregateInput
    _sum?: WatchPartyParticipantSumOrderByAggregateInput
  }

  export type WatchPartyParticipantScalarWhereWithAggregatesInput = {
    AND?: WatchPartyParticipantScalarWhereWithAggregatesInput | WatchPartyParticipantScalarWhereWithAggregatesInput[]
    OR?: WatchPartyParticipantScalarWhereWithAggregatesInput[]
    NOT?: WatchPartyParticipantScalarWhereWithAggregatesInput | WatchPartyParticipantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WatchPartyParticipant"> | number
    joinedAt?: DateTimeWithAggregatesFilter<"WatchPartyParticipant"> | Date | string
    userId?: IntWithAggregatesFilter<"WatchPartyParticipant"> | number
    watchPartyId?: IntWithAggregatesFilter<"WatchPartyParticipant"> | number
  }

  export type UserCreateInput = {
    email: string
    username: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    favoriteGames?: FavoriteGameCreateNestedManyWithoutUserInput
    watchParties?: WatchPartyCreateNestedManyWithoutHostInput
    participations?: WatchPartyParticipantCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    username: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    favoriteGames?: FavoriteGameUncheckedCreateNestedManyWithoutUserInput
    watchParties?: WatchPartyUncheckedCreateNestedManyWithoutHostInput
    participations?: WatchPartyParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    favoriteGames?: FavoriteGameUpdateManyWithoutUserNestedInput
    watchParties?: WatchPartyUpdateManyWithoutHostNestedInput
    participations?: WatchPartyParticipantUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    favoriteGames?: FavoriteGameUncheckedUpdateManyWithoutUserNestedInput
    watchParties?: WatchPartyUncheckedUpdateManyWithoutHostNestedInput
    participations?: WatchPartyParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    username: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateInput = {
    homeTeam: string
    awayTeam: string
    homeScore?: number
    awayScore?: number
    quarter?: number
    timeLeft?: string
    status?: $Enums.GameStatus
    gameDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutGameInput
    favoriteGames?: FavoriteGameCreateNestedManyWithoutGameInput
    watchParties?: WatchPartyCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id?: number
    homeTeam: string
    awayTeam: string
    homeScore?: number
    awayScore?: number
    quarter?: number
    timeLeft?: string
    status?: $Enums.GameStatus
    gameDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutGameInput
    favoriteGames?: FavoriteGameUncheckedCreateNestedManyWithoutGameInput
    watchParties?: WatchPartyUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    quarter?: IntFieldUpdateOperationsInput | number
    timeLeft?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    gameDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutGameNestedInput
    favoriteGames?: FavoriteGameUpdateManyWithoutGameNestedInput
    watchParties?: WatchPartyUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    quarter?: IntFieldUpdateOperationsInput | number
    timeLeft?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    gameDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutGameNestedInput
    favoriteGames?: FavoriteGameUncheckedUpdateManyWithoutGameNestedInput
    watchParties?: WatchPartyUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: number
    homeTeam: string
    awayTeam: string
    homeScore?: number
    awayScore?: number
    quarter?: number
    timeLeft?: string
    status?: $Enums.GameStatus
    gameDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameUpdateManyMutationInput = {
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    quarter?: IntFieldUpdateOperationsInput | number
    timeLeft?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    gameDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    quarter?: IntFieldUpdateOperationsInput | number
    timeLeft?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    gameDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateInput = {
    message: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutChatMessagesInput
    game: GameCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: number
    message: string
    createdAt?: Date | string
    userId: number
    gameId: number
  }

  export type ChatMessageUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatMessagesNestedInput
    game?: GameUpdateOneRequiredWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type ChatMessageCreateManyInput = {
    id?: number
    message: string
    createdAt?: Date | string
    userId: number
    gameId: number
  }

  export type ChatMessageUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteGameCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteGamesInput
    game: GameCreateNestedOneWithoutFavoriteGamesInput
  }

  export type FavoriteGameUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    gameId: number
  }

  export type FavoriteGameUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteGamesNestedInput
    game?: GameUpdateOneRequiredWithoutFavoriteGamesNestedInput
  }

  export type FavoriteGameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteGameCreateManyInput = {
    id?: number
    createdAt?: Date | string
    userId: number
    gameId: number
  }

  export type FavoriteGameUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FavoriteGameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchPartyCreateInput = {
    name: string
    description: string
    isPrivate?: boolean
    maxUsers?: number
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    host: UserCreateNestedOneWithoutWatchPartiesInput
    game?: GameCreateNestedOneWithoutWatchPartiesInput
    particpants?: WatchPartyParticipantCreateNestedManyWithoutWatchPartyInput
  }

  export type WatchPartyUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    isPrivate?: boolean
    maxUsers?: number
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    hostId: number
    gameId?: number | null
    particpants?: WatchPartyParticipantUncheckedCreateNestedManyWithoutWatchPartyInput
  }

  export type WatchPartyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxUsers?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    host?: UserUpdateOneRequiredWithoutWatchPartiesNestedInput
    game?: GameUpdateOneWithoutWatchPartiesNestedInput
    particpants?: WatchPartyParticipantUpdateManyWithoutWatchPartyNestedInput
  }

  export type WatchPartyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxUsers?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostId?: IntFieldUpdateOperationsInput | number
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
    particpants?: WatchPartyParticipantUncheckedUpdateManyWithoutWatchPartyNestedInput
  }

  export type WatchPartyCreateManyInput = {
    id?: number
    name: string
    description: string
    isPrivate?: boolean
    maxUsers?: number
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    hostId: number
    gameId?: number | null
  }

  export type WatchPartyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxUsers?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchPartyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxUsers?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostId?: IntFieldUpdateOperationsInput | number
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WatchPartyParticipantCreateInput = {
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutParticipationsInput
    watchParty: WatchPartyCreateNestedOneWithoutParticpantsInput
  }

  export type WatchPartyParticipantUncheckedCreateInput = {
    id?: number
    joinedAt?: Date | string
    userId: number
    watchPartyId: number
  }

  export type WatchPartyParticipantUpdateInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutParticipationsNestedInput
    watchParty?: WatchPartyUpdateOneRequiredWithoutParticpantsNestedInput
  }

  export type WatchPartyParticipantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    watchPartyId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchPartyParticipantCreateManyInput = {
    id?: number
    joinedAt?: Date | string
    userId: number
    watchPartyId: number
  }

  export type WatchPartyParticipantUpdateManyMutationInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchPartyParticipantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    watchPartyId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type FavoriteGameListRelationFilter = {
    every?: FavoriteGameWhereInput
    some?: FavoriteGameWhereInput
    none?: FavoriteGameWhereInput
  }

  export type WatchPartyListRelationFilter = {
    every?: WatchPartyWhereInput
    some?: WatchPartyWhereInput
    none?: WatchPartyWhereInput
  }

  export type WatchPartyParticipantListRelationFilter = {
    every?: WatchPartyParticipantWhereInput
    some?: WatchPartyParticipantWhereInput
    none?: WatchPartyParticipantWhereInput
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoriteGameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WatchPartyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WatchPartyParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumGameStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusFilter<$PrismaModel> | $Enums.GameStatus
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    homeTeam?: SortOrder
    awayTeam?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    quarter?: SortOrder
    timeLeft?: SortOrder
    status?: SortOrder
    gameDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    id?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    quarter?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    homeTeam?: SortOrder
    awayTeam?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    quarter?: SortOrder
    timeLeft?: SortOrder
    status?: SortOrder
    gameDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    homeTeam?: SortOrder
    awayTeam?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    quarter?: SortOrder
    timeLeft?: SortOrder
    status?: SortOrder
    gameDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    id?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    quarter?: SortOrder
  }

  export type EnumGameStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusWithAggregatesFilter<$PrismaModel> | $Enums.GameStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameStatusFilter<$PrismaModel>
    _max?: NestedEnumGameStatusFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GameScalarRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
  }

  export type ChatMessageAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
  }

  export type ChatMessageSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
  }

  export type FavoriteGameUserIdGameIdCompoundUniqueInput = {
    userId: number
    gameId: number
  }

  export type FavoriteGameCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
  }

  export type FavoriteGameAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
  }

  export type FavoriteGameMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
  }

  export type FavoriteGameMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
  }

  export type FavoriteGameSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    gameId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type GameNullableScalarRelationFilter = {
    is?: GameWhereInput | null
    isNot?: GameWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WatchPartyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isPrivate?: SortOrder
    maxUsers?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostId?: SortOrder
    gameId?: SortOrder
  }

  export type WatchPartyAvgOrderByAggregateInput = {
    id?: SortOrder
    maxUsers?: SortOrder
    hostId?: SortOrder
    gameId?: SortOrder
  }

  export type WatchPartyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isPrivate?: SortOrder
    maxUsers?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostId?: SortOrder
    gameId?: SortOrder
  }

  export type WatchPartyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isPrivate?: SortOrder
    maxUsers?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostId?: SortOrder
    gameId?: SortOrder
  }

  export type WatchPartySumOrderByAggregateInput = {
    id?: SortOrder
    maxUsers?: SortOrder
    hostId?: SortOrder
    gameId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type WatchPartyScalarRelationFilter = {
    is?: WatchPartyWhereInput
    isNot?: WatchPartyWhereInput
  }

  export type WatchPartyParticipantUserIdWatchPartyIdCompoundUniqueInput = {
    userId: number
    watchPartyId: number
  }

  export type WatchPartyParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    watchPartyId?: SortOrder
  }

  export type WatchPartyParticipantAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    watchPartyId?: SortOrder
  }

  export type WatchPartyParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    watchPartyId?: SortOrder
  }

  export type WatchPartyParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    joinedAt?: SortOrder
    userId?: SortOrder
    watchPartyId?: SortOrder
  }

  export type WatchPartyParticipantSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    watchPartyId?: SortOrder
  }

  export type ChatMessageCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type FavoriteGameCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteGameCreateWithoutUserInput, FavoriteGameUncheckedCreateWithoutUserInput> | FavoriteGameCreateWithoutUserInput[] | FavoriteGameUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteGameCreateOrConnectWithoutUserInput | FavoriteGameCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteGameCreateManyUserInputEnvelope
    connect?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
  }

  export type WatchPartyCreateNestedManyWithoutHostInput = {
    create?: XOR<WatchPartyCreateWithoutHostInput, WatchPartyUncheckedCreateWithoutHostInput> | WatchPartyCreateWithoutHostInput[] | WatchPartyUncheckedCreateWithoutHostInput[]
    connectOrCreate?: WatchPartyCreateOrConnectWithoutHostInput | WatchPartyCreateOrConnectWithoutHostInput[]
    createMany?: WatchPartyCreateManyHostInputEnvelope
    connect?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
  }

  export type WatchPartyParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<WatchPartyParticipantCreateWithoutUserInput, WatchPartyParticipantUncheckedCreateWithoutUserInput> | WatchPartyParticipantCreateWithoutUserInput[] | WatchPartyParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchPartyParticipantCreateOrConnectWithoutUserInput | WatchPartyParticipantCreateOrConnectWithoutUserInput[]
    createMany?: WatchPartyParticipantCreateManyUserInputEnvelope
    connect?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type FavoriteGameUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavoriteGameCreateWithoutUserInput, FavoriteGameUncheckedCreateWithoutUserInput> | FavoriteGameCreateWithoutUserInput[] | FavoriteGameUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteGameCreateOrConnectWithoutUserInput | FavoriteGameCreateOrConnectWithoutUserInput[]
    createMany?: FavoriteGameCreateManyUserInputEnvelope
    connect?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
  }

  export type WatchPartyUncheckedCreateNestedManyWithoutHostInput = {
    create?: XOR<WatchPartyCreateWithoutHostInput, WatchPartyUncheckedCreateWithoutHostInput> | WatchPartyCreateWithoutHostInput[] | WatchPartyUncheckedCreateWithoutHostInput[]
    connectOrCreate?: WatchPartyCreateOrConnectWithoutHostInput | WatchPartyCreateOrConnectWithoutHostInput[]
    createMany?: WatchPartyCreateManyHostInputEnvelope
    connect?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
  }

  export type WatchPartyParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WatchPartyParticipantCreateWithoutUserInput, WatchPartyParticipantUncheckedCreateWithoutUserInput> | WatchPartyParticipantCreateWithoutUserInput[] | WatchPartyParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchPartyParticipantCreateOrConnectWithoutUserInput | WatchPartyParticipantCreateOrConnectWithoutUserInput[]
    createMany?: WatchPartyParticipantCreateManyUserInputEnvelope
    connect?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ChatMessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutUserInput | ChatMessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutUserInput | ChatMessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutUserInput | ChatMessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type FavoriteGameUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteGameCreateWithoutUserInput, FavoriteGameUncheckedCreateWithoutUserInput> | FavoriteGameCreateWithoutUserInput[] | FavoriteGameUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteGameCreateOrConnectWithoutUserInput | FavoriteGameCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteGameUpsertWithWhereUniqueWithoutUserInput | FavoriteGameUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteGameCreateManyUserInputEnvelope
    set?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    disconnect?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    delete?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    connect?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    update?: FavoriteGameUpdateWithWhereUniqueWithoutUserInput | FavoriteGameUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteGameUpdateManyWithWhereWithoutUserInput | FavoriteGameUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteGameScalarWhereInput | FavoriteGameScalarWhereInput[]
  }

  export type WatchPartyUpdateManyWithoutHostNestedInput = {
    create?: XOR<WatchPartyCreateWithoutHostInput, WatchPartyUncheckedCreateWithoutHostInput> | WatchPartyCreateWithoutHostInput[] | WatchPartyUncheckedCreateWithoutHostInput[]
    connectOrCreate?: WatchPartyCreateOrConnectWithoutHostInput | WatchPartyCreateOrConnectWithoutHostInput[]
    upsert?: WatchPartyUpsertWithWhereUniqueWithoutHostInput | WatchPartyUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: WatchPartyCreateManyHostInputEnvelope
    set?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    disconnect?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    delete?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    connect?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    update?: WatchPartyUpdateWithWhereUniqueWithoutHostInput | WatchPartyUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: WatchPartyUpdateManyWithWhereWithoutHostInput | WatchPartyUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: WatchPartyScalarWhereInput | WatchPartyScalarWhereInput[]
  }

  export type WatchPartyParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<WatchPartyParticipantCreateWithoutUserInput, WatchPartyParticipantUncheckedCreateWithoutUserInput> | WatchPartyParticipantCreateWithoutUserInput[] | WatchPartyParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchPartyParticipantCreateOrConnectWithoutUserInput | WatchPartyParticipantCreateOrConnectWithoutUserInput[]
    upsert?: WatchPartyParticipantUpsertWithWhereUniqueWithoutUserInput | WatchPartyParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WatchPartyParticipantCreateManyUserInputEnvelope
    set?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    disconnect?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    delete?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    connect?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    update?: WatchPartyParticipantUpdateWithWhereUniqueWithoutUserInput | WatchPartyParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WatchPartyParticipantUpdateManyWithWhereWithoutUserInput | WatchPartyParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WatchPartyParticipantScalarWhereInput | WatchPartyParticipantScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ChatMessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput> | ChatMessageCreateWithoutUserInput[] | ChatMessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutUserInput | ChatMessageCreateOrConnectWithoutUserInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutUserInput | ChatMessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatMessageCreateManyUserInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutUserInput | ChatMessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutUserInput | ChatMessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type FavoriteGameUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavoriteGameCreateWithoutUserInput, FavoriteGameUncheckedCreateWithoutUserInput> | FavoriteGameCreateWithoutUserInput[] | FavoriteGameUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavoriteGameCreateOrConnectWithoutUserInput | FavoriteGameCreateOrConnectWithoutUserInput[]
    upsert?: FavoriteGameUpsertWithWhereUniqueWithoutUserInput | FavoriteGameUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavoriteGameCreateManyUserInputEnvelope
    set?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    disconnect?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    delete?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    connect?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    update?: FavoriteGameUpdateWithWhereUniqueWithoutUserInput | FavoriteGameUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavoriteGameUpdateManyWithWhereWithoutUserInput | FavoriteGameUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavoriteGameScalarWhereInput | FavoriteGameScalarWhereInput[]
  }

  export type WatchPartyUncheckedUpdateManyWithoutHostNestedInput = {
    create?: XOR<WatchPartyCreateWithoutHostInput, WatchPartyUncheckedCreateWithoutHostInput> | WatchPartyCreateWithoutHostInput[] | WatchPartyUncheckedCreateWithoutHostInput[]
    connectOrCreate?: WatchPartyCreateOrConnectWithoutHostInput | WatchPartyCreateOrConnectWithoutHostInput[]
    upsert?: WatchPartyUpsertWithWhereUniqueWithoutHostInput | WatchPartyUpsertWithWhereUniqueWithoutHostInput[]
    createMany?: WatchPartyCreateManyHostInputEnvelope
    set?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    disconnect?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    delete?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    connect?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    update?: WatchPartyUpdateWithWhereUniqueWithoutHostInput | WatchPartyUpdateWithWhereUniqueWithoutHostInput[]
    updateMany?: WatchPartyUpdateManyWithWhereWithoutHostInput | WatchPartyUpdateManyWithWhereWithoutHostInput[]
    deleteMany?: WatchPartyScalarWhereInput | WatchPartyScalarWhereInput[]
  }

  export type WatchPartyParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WatchPartyParticipantCreateWithoutUserInput, WatchPartyParticipantUncheckedCreateWithoutUserInput> | WatchPartyParticipantCreateWithoutUserInput[] | WatchPartyParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchPartyParticipantCreateOrConnectWithoutUserInput | WatchPartyParticipantCreateOrConnectWithoutUserInput[]
    upsert?: WatchPartyParticipantUpsertWithWhereUniqueWithoutUserInput | WatchPartyParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WatchPartyParticipantCreateManyUserInputEnvelope
    set?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    disconnect?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    delete?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    connect?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    update?: WatchPartyParticipantUpdateWithWhereUniqueWithoutUserInput | WatchPartyParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WatchPartyParticipantUpdateManyWithWhereWithoutUserInput | WatchPartyParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WatchPartyParticipantScalarWhereInput | WatchPartyParticipantScalarWhereInput[]
  }

  export type ChatMessageCreateNestedManyWithoutGameInput = {
    create?: XOR<ChatMessageCreateWithoutGameInput, ChatMessageUncheckedCreateWithoutGameInput> | ChatMessageCreateWithoutGameInput[] | ChatMessageUncheckedCreateWithoutGameInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutGameInput | ChatMessageCreateOrConnectWithoutGameInput[]
    createMany?: ChatMessageCreateManyGameInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type FavoriteGameCreateNestedManyWithoutGameInput = {
    create?: XOR<FavoriteGameCreateWithoutGameInput, FavoriteGameUncheckedCreateWithoutGameInput> | FavoriteGameCreateWithoutGameInput[] | FavoriteGameUncheckedCreateWithoutGameInput[]
    connectOrCreate?: FavoriteGameCreateOrConnectWithoutGameInput | FavoriteGameCreateOrConnectWithoutGameInput[]
    createMany?: FavoriteGameCreateManyGameInputEnvelope
    connect?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
  }

  export type WatchPartyCreateNestedManyWithoutGameInput = {
    create?: XOR<WatchPartyCreateWithoutGameInput, WatchPartyUncheckedCreateWithoutGameInput> | WatchPartyCreateWithoutGameInput[] | WatchPartyUncheckedCreateWithoutGameInput[]
    connectOrCreate?: WatchPartyCreateOrConnectWithoutGameInput | WatchPartyCreateOrConnectWithoutGameInput[]
    createMany?: WatchPartyCreateManyGameInputEnvelope
    connect?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<ChatMessageCreateWithoutGameInput, ChatMessageUncheckedCreateWithoutGameInput> | ChatMessageCreateWithoutGameInput[] | ChatMessageUncheckedCreateWithoutGameInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutGameInput | ChatMessageCreateOrConnectWithoutGameInput[]
    createMany?: ChatMessageCreateManyGameInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type FavoriteGameUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<FavoriteGameCreateWithoutGameInput, FavoriteGameUncheckedCreateWithoutGameInput> | FavoriteGameCreateWithoutGameInput[] | FavoriteGameUncheckedCreateWithoutGameInput[]
    connectOrCreate?: FavoriteGameCreateOrConnectWithoutGameInput | FavoriteGameCreateOrConnectWithoutGameInput[]
    createMany?: FavoriteGameCreateManyGameInputEnvelope
    connect?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
  }

  export type WatchPartyUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<WatchPartyCreateWithoutGameInput, WatchPartyUncheckedCreateWithoutGameInput> | WatchPartyCreateWithoutGameInput[] | WatchPartyUncheckedCreateWithoutGameInput[]
    connectOrCreate?: WatchPartyCreateOrConnectWithoutGameInput | WatchPartyCreateOrConnectWithoutGameInput[]
    createMany?: WatchPartyCreateManyGameInputEnvelope
    connect?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
  }

  export type EnumGameStatusFieldUpdateOperationsInput = {
    set?: $Enums.GameStatus
  }

  export type ChatMessageUpdateManyWithoutGameNestedInput = {
    create?: XOR<ChatMessageCreateWithoutGameInput, ChatMessageUncheckedCreateWithoutGameInput> | ChatMessageCreateWithoutGameInput[] | ChatMessageUncheckedCreateWithoutGameInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutGameInput | ChatMessageCreateOrConnectWithoutGameInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutGameInput | ChatMessageUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: ChatMessageCreateManyGameInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutGameInput | ChatMessageUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutGameInput | ChatMessageUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type FavoriteGameUpdateManyWithoutGameNestedInput = {
    create?: XOR<FavoriteGameCreateWithoutGameInput, FavoriteGameUncheckedCreateWithoutGameInput> | FavoriteGameCreateWithoutGameInput[] | FavoriteGameUncheckedCreateWithoutGameInput[]
    connectOrCreate?: FavoriteGameCreateOrConnectWithoutGameInput | FavoriteGameCreateOrConnectWithoutGameInput[]
    upsert?: FavoriteGameUpsertWithWhereUniqueWithoutGameInput | FavoriteGameUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: FavoriteGameCreateManyGameInputEnvelope
    set?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    disconnect?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    delete?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    connect?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    update?: FavoriteGameUpdateWithWhereUniqueWithoutGameInput | FavoriteGameUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: FavoriteGameUpdateManyWithWhereWithoutGameInput | FavoriteGameUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: FavoriteGameScalarWhereInput | FavoriteGameScalarWhereInput[]
  }

  export type WatchPartyUpdateManyWithoutGameNestedInput = {
    create?: XOR<WatchPartyCreateWithoutGameInput, WatchPartyUncheckedCreateWithoutGameInput> | WatchPartyCreateWithoutGameInput[] | WatchPartyUncheckedCreateWithoutGameInput[]
    connectOrCreate?: WatchPartyCreateOrConnectWithoutGameInput | WatchPartyCreateOrConnectWithoutGameInput[]
    upsert?: WatchPartyUpsertWithWhereUniqueWithoutGameInput | WatchPartyUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: WatchPartyCreateManyGameInputEnvelope
    set?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    disconnect?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    delete?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    connect?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    update?: WatchPartyUpdateWithWhereUniqueWithoutGameInput | WatchPartyUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: WatchPartyUpdateManyWithWhereWithoutGameInput | WatchPartyUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: WatchPartyScalarWhereInput | WatchPartyScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<ChatMessageCreateWithoutGameInput, ChatMessageUncheckedCreateWithoutGameInput> | ChatMessageCreateWithoutGameInput[] | ChatMessageUncheckedCreateWithoutGameInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutGameInput | ChatMessageCreateOrConnectWithoutGameInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutGameInput | ChatMessageUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: ChatMessageCreateManyGameInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutGameInput | ChatMessageUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutGameInput | ChatMessageUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type FavoriteGameUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<FavoriteGameCreateWithoutGameInput, FavoriteGameUncheckedCreateWithoutGameInput> | FavoriteGameCreateWithoutGameInput[] | FavoriteGameUncheckedCreateWithoutGameInput[]
    connectOrCreate?: FavoriteGameCreateOrConnectWithoutGameInput | FavoriteGameCreateOrConnectWithoutGameInput[]
    upsert?: FavoriteGameUpsertWithWhereUniqueWithoutGameInput | FavoriteGameUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: FavoriteGameCreateManyGameInputEnvelope
    set?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    disconnect?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    delete?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    connect?: FavoriteGameWhereUniqueInput | FavoriteGameWhereUniqueInput[]
    update?: FavoriteGameUpdateWithWhereUniqueWithoutGameInput | FavoriteGameUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: FavoriteGameUpdateManyWithWhereWithoutGameInput | FavoriteGameUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: FavoriteGameScalarWhereInput | FavoriteGameScalarWhereInput[]
  }

  export type WatchPartyUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<WatchPartyCreateWithoutGameInput, WatchPartyUncheckedCreateWithoutGameInput> | WatchPartyCreateWithoutGameInput[] | WatchPartyUncheckedCreateWithoutGameInput[]
    connectOrCreate?: WatchPartyCreateOrConnectWithoutGameInput | WatchPartyCreateOrConnectWithoutGameInput[]
    upsert?: WatchPartyUpsertWithWhereUniqueWithoutGameInput | WatchPartyUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: WatchPartyCreateManyGameInputEnvelope
    set?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    disconnect?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    delete?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    connect?: WatchPartyWhereUniqueInput | WatchPartyWhereUniqueInput[]
    update?: WatchPartyUpdateWithWhereUniqueWithoutGameInput | WatchPartyUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: WatchPartyUpdateManyWithWhereWithoutGameInput | WatchPartyUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: WatchPartyScalarWhereInput | WatchPartyScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutChatMessagesInput = {
    create?: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutChatMessagesInput = {
    create?: XOR<GameCreateWithoutChatMessagesInput, GameUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: GameCreateOrConnectWithoutChatMessagesInput
    connect?: GameWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutChatMessagesNestedInput = {
    create?: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatMessagesInput
    upsert?: UserUpsertWithoutChatMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatMessagesInput, UserUpdateWithoutChatMessagesInput>, UserUncheckedUpdateWithoutChatMessagesInput>
  }

  export type GameUpdateOneRequiredWithoutChatMessagesNestedInput = {
    create?: XOR<GameCreateWithoutChatMessagesInput, GameUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: GameCreateOrConnectWithoutChatMessagesInput
    upsert?: GameUpsertWithoutChatMessagesInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutChatMessagesInput, GameUpdateWithoutChatMessagesInput>, GameUncheckedUpdateWithoutChatMessagesInput>
  }

  export type UserCreateNestedOneWithoutFavoriteGamesInput = {
    create?: XOR<UserCreateWithoutFavoriteGamesInput, UserUncheckedCreateWithoutFavoriteGamesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteGamesInput
    connect?: UserWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutFavoriteGamesInput = {
    create?: XOR<GameCreateWithoutFavoriteGamesInput, GameUncheckedCreateWithoutFavoriteGamesInput>
    connectOrCreate?: GameCreateOrConnectWithoutFavoriteGamesInput
    connect?: GameWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFavoriteGamesNestedInput = {
    create?: XOR<UserCreateWithoutFavoriteGamesInput, UserUncheckedCreateWithoutFavoriteGamesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavoriteGamesInput
    upsert?: UserUpsertWithoutFavoriteGamesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavoriteGamesInput, UserUpdateWithoutFavoriteGamesInput>, UserUncheckedUpdateWithoutFavoriteGamesInput>
  }

  export type GameUpdateOneRequiredWithoutFavoriteGamesNestedInput = {
    create?: XOR<GameCreateWithoutFavoriteGamesInput, GameUncheckedCreateWithoutFavoriteGamesInput>
    connectOrCreate?: GameCreateOrConnectWithoutFavoriteGamesInput
    upsert?: GameUpsertWithoutFavoriteGamesInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutFavoriteGamesInput, GameUpdateWithoutFavoriteGamesInput>, GameUncheckedUpdateWithoutFavoriteGamesInput>
  }

  export type UserCreateNestedOneWithoutWatchPartiesInput = {
    create?: XOR<UserCreateWithoutWatchPartiesInput, UserUncheckedCreateWithoutWatchPartiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWatchPartiesInput
    connect?: UserWhereUniqueInput
  }

  export type GameCreateNestedOneWithoutWatchPartiesInput = {
    create?: XOR<GameCreateWithoutWatchPartiesInput, GameUncheckedCreateWithoutWatchPartiesInput>
    connectOrCreate?: GameCreateOrConnectWithoutWatchPartiesInput
    connect?: GameWhereUniqueInput
  }

  export type WatchPartyParticipantCreateNestedManyWithoutWatchPartyInput = {
    create?: XOR<WatchPartyParticipantCreateWithoutWatchPartyInput, WatchPartyParticipantUncheckedCreateWithoutWatchPartyInput> | WatchPartyParticipantCreateWithoutWatchPartyInput[] | WatchPartyParticipantUncheckedCreateWithoutWatchPartyInput[]
    connectOrCreate?: WatchPartyParticipantCreateOrConnectWithoutWatchPartyInput | WatchPartyParticipantCreateOrConnectWithoutWatchPartyInput[]
    createMany?: WatchPartyParticipantCreateManyWatchPartyInputEnvelope
    connect?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
  }

  export type WatchPartyParticipantUncheckedCreateNestedManyWithoutWatchPartyInput = {
    create?: XOR<WatchPartyParticipantCreateWithoutWatchPartyInput, WatchPartyParticipantUncheckedCreateWithoutWatchPartyInput> | WatchPartyParticipantCreateWithoutWatchPartyInput[] | WatchPartyParticipantUncheckedCreateWithoutWatchPartyInput[]
    connectOrCreate?: WatchPartyParticipantCreateOrConnectWithoutWatchPartyInput | WatchPartyParticipantCreateOrConnectWithoutWatchPartyInput[]
    createMany?: WatchPartyParticipantCreateManyWatchPartyInputEnvelope
    connect?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutWatchPartiesNestedInput = {
    create?: XOR<UserCreateWithoutWatchPartiesInput, UserUncheckedCreateWithoutWatchPartiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWatchPartiesInput
    upsert?: UserUpsertWithoutWatchPartiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWatchPartiesInput, UserUpdateWithoutWatchPartiesInput>, UserUncheckedUpdateWithoutWatchPartiesInput>
  }

  export type GameUpdateOneWithoutWatchPartiesNestedInput = {
    create?: XOR<GameCreateWithoutWatchPartiesInput, GameUncheckedCreateWithoutWatchPartiesInput>
    connectOrCreate?: GameCreateOrConnectWithoutWatchPartiesInput
    upsert?: GameUpsertWithoutWatchPartiesInput
    disconnect?: GameWhereInput | boolean
    delete?: GameWhereInput | boolean
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutWatchPartiesInput, GameUpdateWithoutWatchPartiesInput>, GameUncheckedUpdateWithoutWatchPartiesInput>
  }

  export type WatchPartyParticipantUpdateManyWithoutWatchPartyNestedInput = {
    create?: XOR<WatchPartyParticipantCreateWithoutWatchPartyInput, WatchPartyParticipantUncheckedCreateWithoutWatchPartyInput> | WatchPartyParticipantCreateWithoutWatchPartyInput[] | WatchPartyParticipantUncheckedCreateWithoutWatchPartyInput[]
    connectOrCreate?: WatchPartyParticipantCreateOrConnectWithoutWatchPartyInput | WatchPartyParticipantCreateOrConnectWithoutWatchPartyInput[]
    upsert?: WatchPartyParticipantUpsertWithWhereUniqueWithoutWatchPartyInput | WatchPartyParticipantUpsertWithWhereUniqueWithoutWatchPartyInput[]
    createMany?: WatchPartyParticipantCreateManyWatchPartyInputEnvelope
    set?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    disconnect?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    delete?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    connect?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    update?: WatchPartyParticipantUpdateWithWhereUniqueWithoutWatchPartyInput | WatchPartyParticipantUpdateWithWhereUniqueWithoutWatchPartyInput[]
    updateMany?: WatchPartyParticipantUpdateManyWithWhereWithoutWatchPartyInput | WatchPartyParticipantUpdateManyWithWhereWithoutWatchPartyInput[]
    deleteMany?: WatchPartyParticipantScalarWhereInput | WatchPartyParticipantScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WatchPartyParticipantUncheckedUpdateManyWithoutWatchPartyNestedInput = {
    create?: XOR<WatchPartyParticipantCreateWithoutWatchPartyInput, WatchPartyParticipantUncheckedCreateWithoutWatchPartyInput> | WatchPartyParticipantCreateWithoutWatchPartyInput[] | WatchPartyParticipantUncheckedCreateWithoutWatchPartyInput[]
    connectOrCreate?: WatchPartyParticipantCreateOrConnectWithoutWatchPartyInput | WatchPartyParticipantCreateOrConnectWithoutWatchPartyInput[]
    upsert?: WatchPartyParticipantUpsertWithWhereUniqueWithoutWatchPartyInput | WatchPartyParticipantUpsertWithWhereUniqueWithoutWatchPartyInput[]
    createMany?: WatchPartyParticipantCreateManyWatchPartyInputEnvelope
    set?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    disconnect?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    delete?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    connect?: WatchPartyParticipantWhereUniqueInput | WatchPartyParticipantWhereUniqueInput[]
    update?: WatchPartyParticipantUpdateWithWhereUniqueWithoutWatchPartyInput | WatchPartyParticipantUpdateWithWhereUniqueWithoutWatchPartyInput[]
    updateMany?: WatchPartyParticipantUpdateManyWithWhereWithoutWatchPartyInput | WatchPartyParticipantUpdateManyWithWhereWithoutWatchPartyInput[]
    deleteMany?: WatchPartyParticipantScalarWhereInput | WatchPartyParticipantScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutParticipationsInput = {
    create?: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipationsInput
    connect?: UserWhereUniqueInput
  }

  export type WatchPartyCreateNestedOneWithoutParticpantsInput = {
    create?: XOR<WatchPartyCreateWithoutParticpantsInput, WatchPartyUncheckedCreateWithoutParticpantsInput>
    connectOrCreate?: WatchPartyCreateOrConnectWithoutParticpantsInput
    connect?: WatchPartyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutParticipationsNestedInput = {
    create?: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipationsInput
    upsert?: UserUpsertWithoutParticipationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutParticipationsInput, UserUpdateWithoutParticipationsInput>, UserUncheckedUpdateWithoutParticipationsInput>
  }

  export type WatchPartyUpdateOneRequiredWithoutParticpantsNestedInput = {
    create?: XOR<WatchPartyCreateWithoutParticpantsInput, WatchPartyUncheckedCreateWithoutParticpantsInput>
    connectOrCreate?: WatchPartyCreateOrConnectWithoutParticpantsInput
    upsert?: WatchPartyUpsertWithoutParticpantsInput
    connect?: WatchPartyWhereUniqueInput
    update?: XOR<XOR<WatchPartyUpdateToOneWithWhereWithoutParticpantsInput, WatchPartyUpdateWithoutParticpantsInput>, WatchPartyUncheckedUpdateWithoutParticpantsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumGameStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusFilter<$PrismaModel> | $Enums.GameStatus
  }

  export type NestedEnumGameStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GameStatus | EnumGameStatusFieldRefInput<$PrismaModel>
    in?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.GameStatus[] | ListEnumGameStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumGameStatusWithAggregatesFilter<$PrismaModel> | $Enums.GameStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGameStatusFilter<$PrismaModel>
    _max?: NestedEnumGameStatusFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ChatMessageCreateWithoutUserInput = {
    message: string
    createdAt?: Date | string
    game: GameCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateWithoutUserInput = {
    id?: number
    message: string
    createdAt?: Date | string
    gameId: number
  }

  export type ChatMessageCreateOrConnectWithoutUserInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput>
  }

  export type ChatMessageCreateManyUserInputEnvelope = {
    data: ChatMessageCreateManyUserInput | ChatMessageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteGameCreateWithoutUserInput = {
    createdAt?: Date | string
    game: GameCreateNestedOneWithoutFavoriteGamesInput
  }

  export type FavoriteGameUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    gameId: number
  }

  export type FavoriteGameCreateOrConnectWithoutUserInput = {
    where: FavoriteGameWhereUniqueInput
    create: XOR<FavoriteGameCreateWithoutUserInput, FavoriteGameUncheckedCreateWithoutUserInput>
  }

  export type FavoriteGameCreateManyUserInputEnvelope = {
    data: FavoriteGameCreateManyUserInput | FavoriteGameCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WatchPartyCreateWithoutHostInput = {
    name: string
    description: string
    isPrivate?: boolean
    maxUsers?: number
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    game?: GameCreateNestedOneWithoutWatchPartiesInput
    particpants?: WatchPartyParticipantCreateNestedManyWithoutWatchPartyInput
  }

  export type WatchPartyUncheckedCreateWithoutHostInput = {
    id?: number
    name: string
    description: string
    isPrivate?: boolean
    maxUsers?: number
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameId?: number | null
    particpants?: WatchPartyParticipantUncheckedCreateNestedManyWithoutWatchPartyInput
  }

  export type WatchPartyCreateOrConnectWithoutHostInput = {
    where: WatchPartyWhereUniqueInput
    create: XOR<WatchPartyCreateWithoutHostInput, WatchPartyUncheckedCreateWithoutHostInput>
  }

  export type WatchPartyCreateManyHostInputEnvelope = {
    data: WatchPartyCreateManyHostInput | WatchPartyCreateManyHostInput[]
    skipDuplicates?: boolean
  }

  export type WatchPartyParticipantCreateWithoutUserInput = {
    joinedAt?: Date | string
    watchParty: WatchPartyCreateNestedOneWithoutParticpantsInput
  }

  export type WatchPartyParticipantUncheckedCreateWithoutUserInput = {
    id?: number
    joinedAt?: Date | string
    watchPartyId: number
  }

  export type WatchPartyParticipantCreateOrConnectWithoutUserInput = {
    where: WatchPartyParticipantWhereUniqueInput
    create: XOR<WatchPartyParticipantCreateWithoutUserInput, WatchPartyParticipantUncheckedCreateWithoutUserInput>
  }

  export type WatchPartyParticipantCreateManyUserInputEnvelope = {
    data: WatchPartyParticipantCreateManyUserInput | WatchPartyParticipantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutUserInput, ChatMessageUncheckedUpdateWithoutUserInput>
    create: XOR<ChatMessageCreateWithoutUserInput, ChatMessageUncheckedCreateWithoutUserInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutUserInput, ChatMessageUncheckedUpdateWithoutUserInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutUserInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: IntFilter<"ChatMessage"> | number
    message?: StringFilter<"ChatMessage"> | string
    createdAt?: DateTimeFilter<"ChatMessage"> | Date | string
    userId?: IntFilter<"ChatMessage"> | number
    gameId?: IntFilter<"ChatMessage"> | number
  }

  export type FavoriteGameUpsertWithWhereUniqueWithoutUserInput = {
    where: FavoriteGameWhereUniqueInput
    update: XOR<FavoriteGameUpdateWithoutUserInput, FavoriteGameUncheckedUpdateWithoutUserInput>
    create: XOR<FavoriteGameCreateWithoutUserInput, FavoriteGameUncheckedCreateWithoutUserInput>
  }

  export type FavoriteGameUpdateWithWhereUniqueWithoutUserInput = {
    where: FavoriteGameWhereUniqueInput
    data: XOR<FavoriteGameUpdateWithoutUserInput, FavoriteGameUncheckedUpdateWithoutUserInput>
  }

  export type FavoriteGameUpdateManyWithWhereWithoutUserInput = {
    where: FavoriteGameScalarWhereInput
    data: XOR<FavoriteGameUpdateManyMutationInput, FavoriteGameUncheckedUpdateManyWithoutUserInput>
  }

  export type FavoriteGameScalarWhereInput = {
    AND?: FavoriteGameScalarWhereInput | FavoriteGameScalarWhereInput[]
    OR?: FavoriteGameScalarWhereInput[]
    NOT?: FavoriteGameScalarWhereInput | FavoriteGameScalarWhereInput[]
    id?: IntFilter<"FavoriteGame"> | number
    createdAt?: DateTimeFilter<"FavoriteGame"> | Date | string
    userId?: IntFilter<"FavoriteGame"> | number
    gameId?: IntFilter<"FavoriteGame"> | number
  }

  export type WatchPartyUpsertWithWhereUniqueWithoutHostInput = {
    where: WatchPartyWhereUniqueInput
    update: XOR<WatchPartyUpdateWithoutHostInput, WatchPartyUncheckedUpdateWithoutHostInput>
    create: XOR<WatchPartyCreateWithoutHostInput, WatchPartyUncheckedCreateWithoutHostInput>
  }

  export type WatchPartyUpdateWithWhereUniqueWithoutHostInput = {
    where: WatchPartyWhereUniqueInput
    data: XOR<WatchPartyUpdateWithoutHostInput, WatchPartyUncheckedUpdateWithoutHostInput>
  }

  export type WatchPartyUpdateManyWithWhereWithoutHostInput = {
    where: WatchPartyScalarWhereInput
    data: XOR<WatchPartyUpdateManyMutationInput, WatchPartyUncheckedUpdateManyWithoutHostInput>
  }

  export type WatchPartyScalarWhereInput = {
    AND?: WatchPartyScalarWhereInput | WatchPartyScalarWhereInput[]
    OR?: WatchPartyScalarWhereInput[]
    NOT?: WatchPartyScalarWhereInput | WatchPartyScalarWhereInput[]
    id?: IntFilter<"WatchParty"> | number
    name?: StringFilter<"WatchParty"> | string
    description?: StringFilter<"WatchParty"> | string
    isPrivate?: BoolFilter<"WatchParty"> | boolean
    maxUsers?: IntFilter<"WatchParty"> | number
    password?: StringNullableFilter<"WatchParty"> | string | null
    createdAt?: DateTimeFilter<"WatchParty"> | Date | string
    updatedAt?: DateTimeFilter<"WatchParty"> | Date | string
    hostId?: IntFilter<"WatchParty"> | number
    gameId?: IntNullableFilter<"WatchParty"> | number | null
  }

  export type WatchPartyParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: WatchPartyParticipantWhereUniqueInput
    update: XOR<WatchPartyParticipantUpdateWithoutUserInput, WatchPartyParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<WatchPartyParticipantCreateWithoutUserInput, WatchPartyParticipantUncheckedCreateWithoutUserInput>
  }

  export type WatchPartyParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: WatchPartyParticipantWhereUniqueInput
    data: XOR<WatchPartyParticipantUpdateWithoutUserInput, WatchPartyParticipantUncheckedUpdateWithoutUserInput>
  }

  export type WatchPartyParticipantUpdateManyWithWhereWithoutUserInput = {
    where: WatchPartyParticipantScalarWhereInput
    data: XOR<WatchPartyParticipantUpdateManyMutationInput, WatchPartyParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type WatchPartyParticipantScalarWhereInput = {
    AND?: WatchPartyParticipantScalarWhereInput | WatchPartyParticipantScalarWhereInput[]
    OR?: WatchPartyParticipantScalarWhereInput[]
    NOT?: WatchPartyParticipantScalarWhereInput | WatchPartyParticipantScalarWhereInput[]
    id?: IntFilter<"WatchPartyParticipant"> | number
    joinedAt?: DateTimeFilter<"WatchPartyParticipant"> | Date | string
    userId?: IntFilter<"WatchPartyParticipant"> | number
    watchPartyId?: IntFilter<"WatchPartyParticipant"> | number
  }

  export type ChatMessageCreateWithoutGameInput = {
    message: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateWithoutGameInput = {
    id?: number
    message: string
    createdAt?: Date | string
    userId: number
  }

  export type ChatMessageCreateOrConnectWithoutGameInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutGameInput, ChatMessageUncheckedCreateWithoutGameInput>
  }

  export type ChatMessageCreateManyGameInputEnvelope = {
    data: ChatMessageCreateManyGameInput | ChatMessageCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type FavoriteGameCreateWithoutGameInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFavoriteGamesInput
  }

  export type FavoriteGameUncheckedCreateWithoutGameInput = {
    id?: number
    createdAt?: Date | string
    userId: number
  }

  export type FavoriteGameCreateOrConnectWithoutGameInput = {
    where: FavoriteGameWhereUniqueInput
    create: XOR<FavoriteGameCreateWithoutGameInput, FavoriteGameUncheckedCreateWithoutGameInput>
  }

  export type FavoriteGameCreateManyGameInputEnvelope = {
    data: FavoriteGameCreateManyGameInput | FavoriteGameCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type WatchPartyCreateWithoutGameInput = {
    name: string
    description: string
    isPrivate?: boolean
    maxUsers?: number
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    host: UserCreateNestedOneWithoutWatchPartiesInput
    particpants?: WatchPartyParticipantCreateNestedManyWithoutWatchPartyInput
  }

  export type WatchPartyUncheckedCreateWithoutGameInput = {
    id?: number
    name: string
    description: string
    isPrivate?: boolean
    maxUsers?: number
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    hostId: number
    particpants?: WatchPartyParticipantUncheckedCreateNestedManyWithoutWatchPartyInput
  }

  export type WatchPartyCreateOrConnectWithoutGameInput = {
    where: WatchPartyWhereUniqueInput
    create: XOR<WatchPartyCreateWithoutGameInput, WatchPartyUncheckedCreateWithoutGameInput>
  }

  export type WatchPartyCreateManyGameInputEnvelope = {
    data: WatchPartyCreateManyGameInput | WatchPartyCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutGameInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutGameInput, ChatMessageUncheckedUpdateWithoutGameInput>
    create: XOR<ChatMessageCreateWithoutGameInput, ChatMessageUncheckedCreateWithoutGameInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutGameInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutGameInput, ChatMessageUncheckedUpdateWithoutGameInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutGameInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutGameInput>
  }

  export type FavoriteGameUpsertWithWhereUniqueWithoutGameInput = {
    where: FavoriteGameWhereUniqueInput
    update: XOR<FavoriteGameUpdateWithoutGameInput, FavoriteGameUncheckedUpdateWithoutGameInput>
    create: XOR<FavoriteGameCreateWithoutGameInput, FavoriteGameUncheckedCreateWithoutGameInput>
  }

  export type FavoriteGameUpdateWithWhereUniqueWithoutGameInput = {
    where: FavoriteGameWhereUniqueInput
    data: XOR<FavoriteGameUpdateWithoutGameInput, FavoriteGameUncheckedUpdateWithoutGameInput>
  }

  export type FavoriteGameUpdateManyWithWhereWithoutGameInput = {
    where: FavoriteGameScalarWhereInput
    data: XOR<FavoriteGameUpdateManyMutationInput, FavoriteGameUncheckedUpdateManyWithoutGameInput>
  }

  export type WatchPartyUpsertWithWhereUniqueWithoutGameInput = {
    where: WatchPartyWhereUniqueInput
    update: XOR<WatchPartyUpdateWithoutGameInput, WatchPartyUncheckedUpdateWithoutGameInput>
    create: XOR<WatchPartyCreateWithoutGameInput, WatchPartyUncheckedCreateWithoutGameInput>
  }

  export type WatchPartyUpdateWithWhereUniqueWithoutGameInput = {
    where: WatchPartyWhereUniqueInput
    data: XOR<WatchPartyUpdateWithoutGameInput, WatchPartyUncheckedUpdateWithoutGameInput>
  }

  export type WatchPartyUpdateManyWithWhereWithoutGameInput = {
    where: WatchPartyScalarWhereInput
    data: XOR<WatchPartyUpdateManyMutationInput, WatchPartyUncheckedUpdateManyWithoutGameInput>
  }

  export type UserCreateWithoutChatMessagesInput = {
    email: string
    username: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteGames?: FavoriteGameCreateNestedManyWithoutUserInput
    watchParties?: WatchPartyCreateNestedManyWithoutHostInput
    participations?: WatchPartyParticipantCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChatMessagesInput = {
    id?: number
    email: string
    username: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteGames?: FavoriteGameUncheckedCreateNestedManyWithoutUserInput
    watchParties?: WatchPartyUncheckedCreateNestedManyWithoutHostInput
    participations?: WatchPartyParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChatMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
  }

  export type GameCreateWithoutChatMessagesInput = {
    homeTeam: string
    awayTeam: string
    homeScore?: number
    awayScore?: number
    quarter?: number
    timeLeft?: string
    status?: $Enums.GameStatus
    gameDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteGames?: FavoriteGameCreateNestedManyWithoutGameInput
    watchParties?: WatchPartyCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutChatMessagesInput = {
    id?: number
    homeTeam: string
    awayTeam: string
    homeScore?: number
    awayScore?: number
    quarter?: number
    timeLeft?: string
    status?: $Enums.GameStatus
    gameDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    favoriteGames?: FavoriteGameUncheckedCreateNestedManyWithoutGameInput
    watchParties?: WatchPartyUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutChatMessagesInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutChatMessagesInput, GameUncheckedCreateWithoutChatMessagesInput>
  }

  export type UserUpsertWithoutChatMessagesInput = {
    update: XOR<UserUpdateWithoutChatMessagesInput, UserUncheckedUpdateWithoutChatMessagesInput>
    create: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatMessagesInput, UserUncheckedUpdateWithoutChatMessagesInput>
  }

  export type UserUpdateWithoutChatMessagesInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteGames?: FavoriteGameUpdateManyWithoutUserNestedInput
    watchParties?: WatchPartyUpdateManyWithoutHostNestedInput
    participations?: WatchPartyParticipantUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteGames?: FavoriteGameUncheckedUpdateManyWithoutUserNestedInput
    watchParties?: WatchPartyUncheckedUpdateManyWithoutHostNestedInput
    participations?: WatchPartyParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GameUpsertWithoutChatMessagesInput = {
    update: XOR<GameUpdateWithoutChatMessagesInput, GameUncheckedUpdateWithoutChatMessagesInput>
    create: XOR<GameCreateWithoutChatMessagesInput, GameUncheckedCreateWithoutChatMessagesInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutChatMessagesInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutChatMessagesInput, GameUncheckedUpdateWithoutChatMessagesInput>
  }

  export type GameUpdateWithoutChatMessagesInput = {
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    quarter?: IntFieldUpdateOperationsInput | number
    timeLeft?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    gameDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteGames?: FavoriteGameUpdateManyWithoutGameNestedInput
    watchParties?: WatchPartyUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutChatMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    quarter?: IntFieldUpdateOperationsInput | number
    timeLeft?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    gameDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    favoriteGames?: FavoriteGameUncheckedUpdateManyWithoutGameNestedInput
    watchParties?: WatchPartyUncheckedUpdateManyWithoutGameNestedInput
  }

  export type UserCreateWithoutFavoriteGamesInput = {
    email: string
    username: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    watchParties?: WatchPartyCreateNestedManyWithoutHostInput
    participations?: WatchPartyParticipantCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavoriteGamesInput = {
    id?: number
    email: string
    username: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    watchParties?: WatchPartyUncheckedCreateNestedManyWithoutHostInput
    participations?: WatchPartyParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavoriteGamesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavoriteGamesInput, UserUncheckedCreateWithoutFavoriteGamesInput>
  }

  export type GameCreateWithoutFavoriteGamesInput = {
    homeTeam: string
    awayTeam: string
    homeScore?: number
    awayScore?: number
    quarter?: number
    timeLeft?: string
    status?: $Enums.GameStatus
    gameDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutGameInput
    watchParties?: WatchPartyCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutFavoriteGamesInput = {
    id?: number
    homeTeam: string
    awayTeam: string
    homeScore?: number
    awayScore?: number
    quarter?: number
    timeLeft?: string
    status?: $Enums.GameStatus
    gameDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutGameInput
    watchParties?: WatchPartyUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutFavoriteGamesInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutFavoriteGamesInput, GameUncheckedCreateWithoutFavoriteGamesInput>
  }

  export type UserUpsertWithoutFavoriteGamesInput = {
    update: XOR<UserUpdateWithoutFavoriteGamesInput, UserUncheckedUpdateWithoutFavoriteGamesInput>
    create: XOR<UserCreateWithoutFavoriteGamesInput, UserUncheckedCreateWithoutFavoriteGamesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavoriteGamesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavoriteGamesInput, UserUncheckedUpdateWithoutFavoriteGamesInput>
  }

  export type UserUpdateWithoutFavoriteGamesInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    watchParties?: WatchPartyUpdateManyWithoutHostNestedInput
    participations?: WatchPartyParticipantUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavoriteGamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    watchParties?: WatchPartyUncheckedUpdateManyWithoutHostNestedInput
    participations?: WatchPartyParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GameUpsertWithoutFavoriteGamesInput = {
    update: XOR<GameUpdateWithoutFavoriteGamesInput, GameUncheckedUpdateWithoutFavoriteGamesInput>
    create: XOR<GameCreateWithoutFavoriteGamesInput, GameUncheckedCreateWithoutFavoriteGamesInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutFavoriteGamesInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutFavoriteGamesInput, GameUncheckedUpdateWithoutFavoriteGamesInput>
  }

  export type GameUpdateWithoutFavoriteGamesInput = {
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    quarter?: IntFieldUpdateOperationsInput | number
    timeLeft?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    gameDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutGameNestedInput
    watchParties?: WatchPartyUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutFavoriteGamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    quarter?: IntFieldUpdateOperationsInput | number
    timeLeft?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    gameDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutGameNestedInput
    watchParties?: WatchPartyUncheckedUpdateManyWithoutGameNestedInput
  }

  export type UserCreateWithoutWatchPartiesInput = {
    email: string
    username: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    favoriteGames?: FavoriteGameCreateNestedManyWithoutUserInput
    participations?: WatchPartyParticipantCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWatchPartiesInput = {
    id?: number
    email: string
    username: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    favoriteGames?: FavoriteGameUncheckedCreateNestedManyWithoutUserInput
    participations?: WatchPartyParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWatchPartiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWatchPartiesInput, UserUncheckedCreateWithoutWatchPartiesInput>
  }

  export type GameCreateWithoutWatchPartiesInput = {
    homeTeam: string
    awayTeam: string
    homeScore?: number
    awayScore?: number
    quarter?: number
    timeLeft?: string
    status?: $Enums.GameStatus
    gameDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutGameInput
    favoriteGames?: FavoriteGameCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutWatchPartiesInput = {
    id?: number
    homeTeam: string
    awayTeam: string
    homeScore?: number
    awayScore?: number
    quarter?: number
    timeLeft?: string
    status?: $Enums.GameStatus
    gameDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutGameInput
    favoriteGames?: FavoriteGameUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutWatchPartiesInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutWatchPartiesInput, GameUncheckedCreateWithoutWatchPartiesInput>
  }

  export type WatchPartyParticipantCreateWithoutWatchPartyInput = {
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutParticipationsInput
  }

  export type WatchPartyParticipantUncheckedCreateWithoutWatchPartyInput = {
    id?: number
    joinedAt?: Date | string
    userId: number
  }

  export type WatchPartyParticipantCreateOrConnectWithoutWatchPartyInput = {
    where: WatchPartyParticipantWhereUniqueInput
    create: XOR<WatchPartyParticipantCreateWithoutWatchPartyInput, WatchPartyParticipantUncheckedCreateWithoutWatchPartyInput>
  }

  export type WatchPartyParticipantCreateManyWatchPartyInputEnvelope = {
    data: WatchPartyParticipantCreateManyWatchPartyInput | WatchPartyParticipantCreateManyWatchPartyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWatchPartiesInput = {
    update: XOR<UserUpdateWithoutWatchPartiesInput, UserUncheckedUpdateWithoutWatchPartiesInput>
    create: XOR<UserCreateWithoutWatchPartiesInput, UserUncheckedCreateWithoutWatchPartiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWatchPartiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWatchPartiesInput, UserUncheckedUpdateWithoutWatchPartiesInput>
  }

  export type UserUpdateWithoutWatchPartiesInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    favoriteGames?: FavoriteGameUpdateManyWithoutUserNestedInput
    participations?: WatchPartyParticipantUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWatchPartiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    favoriteGames?: FavoriteGameUncheckedUpdateManyWithoutUserNestedInput
    participations?: WatchPartyParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GameUpsertWithoutWatchPartiesInput = {
    update: XOR<GameUpdateWithoutWatchPartiesInput, GameUncheckedUpdateWithoutWatchPartiesInput>
    create: XOR<GameCreateWithoutWatchPartiesInput, GameUncheckedCreateWithoutWatchPartiesInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutWatchPartiesInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutWatchPartiesInput, GameUncheckedUpdateWithoutWatchPartiesInput>
  }

  export type GameUpdateWithoutWatchPartiesInput = {
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    quarter?: IntFieldUpdateOperationsInput | number
    timeLeft?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    gameDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutGameNestedInput
    favoriteGames?: FavoriteGameUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutWatchPartiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    homeTeam?: StringFieldUpdateOperationsInput | string
    awayTeam?: StringFieldUpdateOperationsInput | string
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    quarter?: IntFieldUpdateOperationsInput | number
    timeLeft?: StringFieldUpdateOperationsInput | string
    status?: EnumGameStatusFieldUpdateOperationsInput | $Enums.GameStatus
    gameDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutGameNestedInput
    favoriteGames?: FavoriteGameUncheckedUpdateManyWithoutGameNestedInput
  }

  export type WatchPartyParticipantUpsertWithWhereUniqueWithoutWatchPartyInput = {
    where: WatchPartyParticipantWhereUniqueInput
    update: XOR<WatchPartyParticipantUpdateWithoutWatchPartyInput, WatchPartyParticipantUncheckedUpdateWithoutWatchPartyInput>
    create: XOR<WatchPartyParticipantCreateWithoutWatchPartyInput, WatchPartyParticipantUncheckedCreateWithoutWatchPartyInput>
  }

  export type WatchPartyParticipantUpdateWithWhereUniqueWithoutWatchPartyInput = {
    where: WatchPartyParticipantWhereUniqueInput
    data: XOR<WatchPartyParticipantUpdateWithoutWatchPartyInput, WatchPartyParticipantUncheckedUpdateWithoutWatchPartyInput>
  }

  export type WatchPartyParticipantUpdateManyWithWhereWithoutWatchPartyInput = {
    where: WatchPartyParticipantScalarWhereInput
    data: XOR<WatchPartyParticipantUpdateManyMutationInput, WatchPartyParticipantUncheckedUpdateManyWithoutWatchPartyInput>
  }

  export type UserCreateWithoutParticipationsInput = {
    email: string
    username: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageCreateNestedManyWithoutUserInput
    favoriteGames?: FavoriteGameCreateNestedManyWithoutUserInput
    watchParties?: WatchPartyCreateNestedManyWithoutHostInput
  }

  export type UserUncheckedCreateWithoutParticipationsInput = {
    id?: number
    email: string
    username: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutUserInput
    favoriteGames?: FavoriteGameUncheckedCreateNestedManyWithoutUserInput
    watchParties?: WatchPartyUncheckedCreateNestedManyWithoutHostInput
  }

  export type UserCreateOrConnectWithoutParticipationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
  }

  export type WatchPartyCreateWithoutParticpantsInput = {
    name: string
    description: string
    isPrivate?: boolean
    maxUsers?: number
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    host: UserCreateNestedOneWithoutWatchPartiesInput
    game?: GameCreateNestedOneWithoutWatchPartiesInput
  }

  export type WatchPartyUncheckedCreateWithoutParticpantsInput = {
    id?: number
    name: string
    description: string
    isPrivate?: boolean
    maxUsers?: number
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    hostId: number
    gameId?: number | null
  }

  export type WatchPartyCreateOrConnectWithoutParticpantsInput = {
    where: WatchPartyWhereUniqueInput
    create: XOR<WatchPartyCreateWithoutParticpantsInput, WatchPartyUncheckedCreateWithoutParticpantsInput>
  }

  export type UserUpsertWithoutParticipationsInput = {
    update: XOR<UserUpdateWithoutParticipationsInput, UserUncheckedUpdateWithoutParticipationsInput>
    create: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutParticipationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutParticipationsInput, UserUncheckedUpdateWithoutParticipationsInput>
  }

  export type UserUpdateWithoutParticipationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUpdateManyWithoutUserNestedInput
    favoriteGames?: FavoriteGameUpdateManyWithoutUserNestedInput
    watchParties?: WatchPartyUpdateManyWithoutHostNestedInput
  }

  export type UserUncheckedUpdateWithoutParticipationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutUserNestedInput
    favoriteGames?: FavoriteGameUncheckedUpdateManyWithoutUserNestedInput
    watchParties?: WatchPartyUncheckedUpdateManyWithoutHostNestedInput
  }

  export type WatchPartyUpsertWithoutParticpantsInput = {
    update: XOR<WatchPartyUpdateWithoutParticpantsInput, WatchPartyUncheckedUpdateWithoutParticpantsInput>
    create: XOR<WatchPartyCreateWithoutParticpantsInput, WatchPartyUncheckedCreateWithoutParticpantsInput>
    where?: WatchPartyWhereInput
  }

  export type WatchPartyUpdateToOneWithWhereWithoutParticpantsInput = {
    where?: WatchPartyWhereInput
    data: XOR<WatchPartyUpdateWithoutParticpantsInput, WatchPartyUncheckedUpdateWithoutParticpantsInput>
  }

  export type WatchPartyUpdateWithoutParticpantsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxUsers?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    host?: UserUpdateOneRequiredWithoutWatchPartiesNestedInput
    game?: GameUpdateOneWithoutWatchPartiesNestedInput
  }

  export type WatchPartyUncheckedUpdateWithoutParticpantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxUsers?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostId?: IntFieldUpdateOperationsInput | number
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChatMessageCreateManyUserInput = {
    id?: number
    message: string
    createdAt?: Date | string
    gameId: number
  }

  export type FavoriteGameCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    gameId: number
  }

  export type WatchPartyCreateManyHostInput = {
    id?: number
    name: string
    description: string
    isPrivate?: boolean
    maxUsers?: number
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    gameId?: number | null
  }

  export type WatchPartyParticipantCreateManyUserInput = {
    id?: number
    joinedAt?: Date | string
    watchPartyId: number
  }

  export type ChatMessageUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type ChatMessageUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteGameUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutFavoriteGamesNestedInput
  }

  export type FavoriteGameUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteGameUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchPartyUpdateWithoutHostInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxUsers?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneWithoutWatchPartiesNestedInput
    particpants?: WatchPartyParticipantUpdateManyWithoutWatchPartyNestedInput
  }

  export type WatchPartyUncheckedUpdateWithoutHostInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxUsers?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
    particpants?: WatchPartyParticipantUncheckedUpdateManyWithoutWatchPartyNestedInput
  }

  export type WatchPartyUncheckedUpdateManyWithoutHostInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxUsers?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gameId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WatchPartyParticipantUpdateWithoutUserInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    watchParty?: WatchPartyUpdateOneRequiredWithoutParticpantsNestedInput
  }

  export type WatchPartyParticipantUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    watchPartyId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchPartyParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    watchPartyId?: IntFieldUpdateOperationsInput | number
  }

  export type ChatMessageCreateManyGameInput = {
    id?: number
    message: string
    createdAt?: Date | string
    userId: number
  }

  export type FavoriteGameCreateManyGameInput = {
    id?: number
    createdAt?: Date | string
    userId: number
  }

  export type WatchPartyCreateManyGameInput = {
    id?: number
    name: string
    description: string
    isPrivate?: boolean
    maxUsers?: number
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    hostId: number
  }

  export type ChatMessageUpdateWithoutGameInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ChatMessageUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteGameUpdateWithoutGameInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFavoriteGamesNestedInput
  }

  export type FavoriteGameUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type FavoriteGameUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchPartyUpdateWithoutGameInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxUsers?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    host?: UserUpdateOneRequiredWithoutWatchPartiesNestedInput
    particpants?: WatchPartyParticipantUpdateManyWithoutWatchPartyNestedInput
  }

  export type WatchPartyUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxUsers?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostId?: IntFieldUpdateOperationsInput | number
    particpants?: WatchPartyParticipantUncheckedUpdateManyWithoutWatchPartyNestedInput
  }

  export type WatchPartyUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isPrivate?: BoolFieldUpdateOperationsInput | boolean
    maxUsers?: IntFieldUpdateOperationsInput | number
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchPartyParticipantCreateManyWatchPartyInput = {
    id?: number
    joinedAt?: Date | string
    userId: number
  }

  export type WatchPartyParticipantUpdateWithoutWatchPartyInput = {
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutParticipationsNestedInput
  }

  export type WatchPartyParticipantUncheckedUpdateWithoutWatchPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type WatchPartyParticipantUncheckedUpdateManyWithoutWatchPartyInput = {
    id?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}